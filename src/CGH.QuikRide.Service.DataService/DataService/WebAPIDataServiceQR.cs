// <auto-generated> - Template:WebApiDataService, Version:1.1, Id:424e7ec7-bd9d-4cd3-9257-6ffbc772b82e
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using CodeGenHero.Logging;
using CodeGenHero.DataService;
using CGH.QuikRide.API.Client.Interface;
using xDTO = CGH.QuikRide.DTO.QR;

namespace CGH.QuikRide.API.Client
{
	public partial class WebApiDataServiceQR : WebApiDataServiceBase, IWebApiDataServiceQR
	{
		public WebApiDataServiceQR(ILoggingService log, IWebApiExecutionContext context) : base(log, context)
		{ }

		private WebApiDataServiceQR() : base()
		{ }


		#region GetAllPages

		public async Task<IList<xDTO.Driver>> GetAllPagesDriversAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetDriversAsync);
		}

		public async Task<IList<xDTO.Feedback>> GetAllPagesFeedbacksAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetFeedbacksAsync);
		}

		public async Task<IList<xDTO.FeedbackType>> GetAllPagesFeedbackTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetFeedbackTypesAsync);
		}

		public async Task<IList<xDTO.GenderType>> GetAllPagesGenderTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetGenderTypesAsync);
		}

		public async Task<IList<xDTO.Holiday>> GetAllPagesHolidaysAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetHolidaysAsync);
		}

		public async Task<IList<xDTO.LanguageType>> GetAllPagesLanguageTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetLanguageTypesAsync);
		}

		public async Task<IList<xDTO.Location>> GetAllPagesLocationsAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetLocationsAsync);
		}

		public async Task<IList<xDTO.NotificationType>> GetAllPagesNotificationTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetNotificationTypesAsync);
		}

		public async Task<IList<xDTO.Reservation>> GetAllPagesReservationsAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetReservationsAsync);
		}

		public async Task<IList<xDTO.ReservationCancellationReasonType>> GetAllPagesReservationCancellationReasonTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetReservationCancellationReasonTypesAsync);
		}

		public async Task<IList<xDTO.ReservationRequest>> GetAllPagesReservationRequestsAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetReservationRequestsAsync);
		}

		public async Task<IList<xDTO.ReservationRequestCancellationReasonType>> GetAllPagesReservationRequestCancellationReasonTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetReservationRequestCancellationReasonTypesAsync);
		}

		public async Task<IList<xDTO.ReservationRequestOption>> GetAllPagesReservationRequestOptionsAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetReservationRequestOptionsAsync);
		}

		public async Task<IList<xDTO.ReservationRequestStatusType>> GetAllPagesReservationRequestStatusTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetReservationRequestStatusTypesAsync);
		}

		public async Task<IList<xDTO.ReservationStatusType>> GetAllPagesReservationStatusTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetReservationStatusTypesAsync);
		}

		public async Task<IList<xDTO.Ride>> GetAllPagesRidesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetRidesAsync);
		}

		public async Task<IList<xDTO.RidePosition>> GetAllPagesRidePositionsAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetRidePositionsAsync);
		}

		public async Task<IList<xDTO.RideServiceType>> GetAllPagesRideServiceTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetRideServiceTypesAsync);
		}

		public async Task<IList<xDTO.User>> GetAllPagesUsersAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetUsersAsync);
		}

		public async Task<IList<xDTO.UsersLocation>> GetAllPagesUsersLocationsAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetUsersLocationsAsync);
		}

		public async Task<IList<xDTO.UsersNotificationType>> GetAllPagesUsersNotificationTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetUsersNotificationTypesAsync);
		}

		public async Task<IList<xDTO.Vehicle>> GetAllPagesVehiclesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetVehiclesAsync);
		}

		public async Task<IList<xDTO.VehicleFeatureType>> GetAllPagesVehicleFeatureTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetVehicleFeatureTypesAsync);
		}

		public async Task<IList<xDTO.VehicleStatusType>> GetAllPagesVehicleStatusTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetVehicleStatusTypesAsync);
		}

		public async Task<IList<xDTO.VehicleType>> GetAllPagesVehicleTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetVehicleTypesAsync);
		}

		public async Task<IList<xDTO.VehicleTypeVehicleFeatureType>> GetAllPagesVehicleTypeVehicleFeatureTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetVehicleTypeVehicleFeatureTypesAsync);
		}

		public async Task<IList<xDTO.VehicleVehicleFeatureType>> GetAllPagesVehicleVehicleFeatureTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetVehicleVehicleFeatureTypesAsync);
		}

		#endregion GetAllPages



		#region GetOnePage

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Driver>>>> GetDriversAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.Driver>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}Drivers", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Driver>>>> GetDriversAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetDriversAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Feedback>>>> GetFeedbacksAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.Feedback>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}Feedbacks", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Feedback>>>> GetFeedbacksAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetFeedbacksAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.FeedbackType>>>> GetFeedbackTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.FeedbackType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}FeedbackTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.FeedbackType>>>> GetFeedbackTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetFeedbackTypesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.GenderType>>>> GetGenderTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.GenderType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}GenderTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.GenderType>>>> GetGenderTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetGenderTypesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Holiday>>>> GetHolidaysAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.Holiday>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}Holidays", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Holiday>>>> GetHolidaysAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetHolidaysAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.LanguageType>>>> GetLanguageTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.LanguageType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}LanguageTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.LanguageType>>>> GetLanguageTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetLanguageTypesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Location>>>> GetLocationsAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.Location>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}Locations", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Location>>>> GetLocationsAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetLocationsAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.NotificationType>>>> GetNotificationTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.NotificationType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}NotificationTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.NotificationType>>>> GetNotificationTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetNotificationTypesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Reservation>>>> GetReservationsAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.Reservation>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}Reservations", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Reservation>>>> GetReservationsAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetReservationsAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ReservationCancellationReasonType>>>> GetReservationCancellationReasonTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.ReservationCancellationReasonType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}ReservationCancellationReasonTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ReservationCancellationReasonType>>>> GetReservationCancellationReasonTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetReservationCancellationReasonTypesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ReservationRequest>>>> GetReservationRequestsAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.ReservationRequest>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}ReservationRequests", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ReservationRequest>>>> GetReservationRequestsAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetReservationRequestsAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ReservationRequestCancellationReasonType>>>> GetReservationRequestCancellationReasonTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.ReservationRequestCancellationReasonType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}ReservationRequestCancellationReasonTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ReservationRequestCancellationReasonType>>>> GetReservationRequestCancellationReasonTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetReservationRequestCancellationReasonTypesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ReservationRequestOption>>>> GetReservationRequestOptionsAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.ReservationRequestOption>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}ReservationRequestOptions", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ReservationRequestOption>>>> GetReservationRequestOptionsAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetReservationRequestOptionsAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ReservationRequestStatusType>>>> GetReservationRequestStatusTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.ReservationRequestStatusType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}ReservationRequestStatusTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ReservationRequestStatusType>>>> GetReservationRequestStatusTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetReservationRequestStatusTypesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ReservationStatusType>>>> GetReservationStatusTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.ReservationStatusType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}ReservationStatusTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ReservationStatusType>>>> GetReservationStatusTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetReservationStatusTypesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Ride>>>> GetRidesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.Ride>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}Rides", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Ride>>>> GetRidesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetRidesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.RidePosition>>>> GetRidePositionsAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.RidePosition>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}RidePositions", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.RidePosition>>>> GetRidePositionsAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetRidePositionsAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.RideServiceType>>>> GetRideServiceTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.RideServiceType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}RideServiceTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.RideServiceType>>>> GetRideServiceTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetRideServiceTypesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.User>>>> GetUsersAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.User>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}Users", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.User>>>> GetUsersAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetUsersAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.UsersLocation>>>> GetUsersLocationsAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.UsersLocation>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}UsersLocations", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.UsersLocation>>>> GetUsersLocationsAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetUsersLocationsAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.UsersNotificationType>>>> GetUsersNotificationTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.UsersNotificationType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}UsersNotificationTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.UsersNotificationType>>>> GetUsersNotificationTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetUsersNotificationTypesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Vehicle>>>> GetVehiclesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.Vehicle>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}Vehicles", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Vehicle>>>> GetVehiclesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetVehiclesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.VehicleFeatureType>>>> GetVehicleFeatureTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.VehicleFeatureType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}VehicleFeatureTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.VehicleFeatureType>>>> GetVehicleFeatureTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetVehicleFeatureTypesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.VehicleStatusType>>>> GetVehicleStatusTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.VehicleStatusType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}VehicleStatusTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.VehicleStatusType>>>> GetVehicleStatusTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetVehicleStatusTypesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.VehicleType>>>> GetVehicleTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.VehicleType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}VehicleTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.VehicleType>>>> GetVehicleTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetVehicleTypesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.VehicleTypeVehicleFeatureType>>>> GetVehicleTypeVehicleFeatureTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.VehicleTypeVehicleFeatureType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}VehicleTypeVehicleFeatureTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.VehicleTypeVehicleFeatureType>>>> GetVehicleTypeVehicleFeatureTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetVehicleTypeVehicleFeatureTypesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.VehicleVehicleFeatureType>>>> GetVehicleVehicleFeatureTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.VehicleVehicleFeatureType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}VehicleVehicleFeatureTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.VehicleVehicleFeatureType>>>> GetVehicleVehicleFeatureTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetVehicleVehicleFeatureTypesAsync(pageDataRequest);
		}

		#endregion GetOnePage



		#region Get By PK

		public async Task<IHttpCallResultCGHT<xDTO.Driver>> GetDriverAsync(int driverId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.Driver>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Drivers/{driverId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Feedback>> GetFeedbackAsync(System.Guid feedbackId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.Feedback>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Feedbacks/{feedbackId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.FeedbackType>> GetFeedbackTypeAsync(int feedbackTypeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.FeedbackType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}FeedbackTypes/{feedbackTypeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.GenderType>> GetGenderTypeAsync(int genderTypeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.GenderType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}GenderTypes/{genderTypeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Holiday>> GetHolidayAsync(int holidayId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.Holiday>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Holidays/{holidayId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.LanguageType>> GetLanguageTypeAsync(int languageTypeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.LanguageType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}LanguageTypes/{languageTypeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Location>> GetLocationAsync(System.Guid locationId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.Location>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Locations/{locationId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.NotificationType>> GetNotificationTypeAsync(int notificationTypeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.NotificationType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}NotificationTypes/{notificationTypeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Reservation>> GetReservationAsync(System.Guid reservationId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.Reservation>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Reservations/{reservationId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.ReservationCancellationReasonType>> GetReservationCancellationReasonTypeAsync(int reservationCancellationReasonTypeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.ReservationCancellationReasonType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}ReservationCancellationReasonTypes/{reservationCancellationReasonTypeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.ReservationRequest>> GetReservationRequestAsync(System.Guid reservationRequestId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.ReservationRequest>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}ReservationRequests/{reservationRequestId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.ReservationRequestCancellationReasonType>> GetReservationRequestCancellationReasonTypeAsync(int reservationRequestCancellationReasonTypeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.ReservationRequestCancellationReasonType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}ReservationRequestCancellationReasonTypes/{reservationRequestCancellationReasonTypeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.ReservationRequestOption>> GetReservationRequestOptionAsync(int reservationRequestOptionId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.ReservationRequestOption>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}ReservationRequestOptions/{reservationRequestOptionId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.ReservationRequestStatusType>> GetReservationRequestStatusTypeAsync(int reservationRequestStatusTypeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.ReservationRequestStatusType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}ReservationRequestStatusTypes/{reservationRequestStatusTypeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.ReservationStatusType>> GetReservationStatusTypeAsync(int reservationStatusTypeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.ReservationStatusType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}ReservationStatusTypes/{reservationStatusTypeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Ride>> GetRideAsync(System.Guid rideId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.Ride>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Rides/{rideId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.RidePosition>> GetRidePositionAsync(System.Guid ridePositionId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.RidePosition>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}RidePositions/{ridePositionId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.RideServiceType>> GetRideServiceTypeAsync(int rideServiceTypeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.RideServiceType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}RideServiceTypes/{rideServiceTypeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.User>> GetUserAsync(int userId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.User>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Users/{userId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.UsersLocation>> GetUsersLocationAsync(int userId, System.Guid locationId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.UsersLocation>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}UsersLocations/{userId}/{locationId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.UsersNotificationType>> GetUsersNotificationTypeAsync(int userId, int notificationTypeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.UsersNotificationType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}UsersNotificationTypes/{userId}/{notificationTypeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Vehicle>> GetVehicleAsync(int vehicleId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.Vehicle>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Vehicles/{vehicleId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.VehicleFeatureType>> GetVehicleFeatureTypeAsync(int vehicleFeatureTypeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.VehicleFeatureType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}VehicleFeatureTypes/{vehicleFeatureTypeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.VehicleStatusType>> GetVehicleStatusTypeAsync(int vehicleStatusTypeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.VehicleStatusType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}VehicleStatusTypes/{vehicleStatusTypeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.VehicleType>> GetVehicleTypeAsync(int vehicleTypeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.VehicleType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}VehicleTypes/{vehicleTypeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.VehicleTypeVehicleFeatureType>> GetVehicleTypeVehicleFeatureTypeAsync(int vehicleTypeId, int vehicleFeatureTypeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.VehicleTypeVehicleFeatureType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}VehicleTypeVehicleFeatureTypes/{vehicleTypeId}/{vehicleFeatureTypeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.VehicleVehicleFeatureType>> GetVehicleVehicleFeatureTypeAsync(int vehicleId, int vehicleFeatureTypeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.VehicleVehicleFeatureType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}VehicleVehicleFeatureTypes/{vehicleId}/{vehicleFeatureTypeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		#endregion Get By PK



		#region Create

			public async Task<IHttpCallResultCGHT<xDTO.Driver>> CreateDriverAsync(xDTO.Driver item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.Driver>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Drivers/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Feedback>> CreateFeedbackAsync(xDTO.Feedback item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.Feedback>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Feedbacks/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.FeedbackType>> CreateFeedbackTypeAsync(xDTO.FeedbackType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.FeedbackType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}FeedbackTypes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.GenderType>> CreateGenderTypeAsync(xDTO.GenderType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.GenderType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}GenderTypes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Holiday>> CreateHolidayAsync(xDTO.Holiday item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.Holiday>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Holidays/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.LanguageType>> CreateLanguageTypeAsync(xDTO.LanguageType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.LanguageType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}LanguageTypes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Location>> CreateLocationAsync(xDTO.Location item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.Location>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Locations/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.NotificationType>> CreateNotificationTypeAsync(xDTO.NotificationType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.NotificationType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}NotificationTypes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Reservation>> CreateReservationAsync(xDTO.Reservation item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.Reservation>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Reservations/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.ReservationCancellationReasonType>> CreateReservationCancellationReasonTypeAsync(xDTO.ReservationCancellationReasonType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.ReservationCancellationReasonType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}ReservationCancellationReasonTypes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.ReservationRequest>> CreateReservationRequestAsync(xDTO.ReservationRequest item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.ReservationRequest>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}ReservationRequests/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.ReservationRequestCancellationReasonType>> CreateReservationRequestCancellationReasonTypeAsync(xDTO.ReservationRequestCancellationReasonType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.ReservationRequestCancellationReasonType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}ReservationRequestCancellationReasonTypes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.ReservationRequestOption>> CreateReservationRequestOptionAsync(xDTO.ReservationRequestOption item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.ReservationRequestOption>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}ReservationRequestOptions/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.ReservationRequestStatusType>> CreateReservationRequestStatusTypeAsync(xDTO.ReservationRequestStatusType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.ReservationRequestStatusType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}ReservationRequestStatusTypes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.ReservationStatusType>> CreateReservationStatusTypeAsync(xDTO.ReservationStatusType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.ReservationStatusType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}ReservationStatusTypes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Ride>> CreateRideAsync(xDTO.Ride item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.Ride>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Rides/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.RidePosition>> CreateRidePositionAsync(xDTO.RidePosition item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.RidePosition>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}RidePositions/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.RideServiceType>> CreateRideServiceTypeAsync(xDTO.RideServiceType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.RideServiceType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}RideServiceTypes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.User>> CreateUserAsync(xDTO.User item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.User>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Users/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.UsersLocation>> CreateUsersLocationAsync(xDTO.UsersLocation item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.UsersLocation>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}UsersLocations/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.UsersNotificationType>> CreateUsersNotificationTypeAsync(xDTO.UsersNotificationType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.UsersNotificationType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}UsersNotificationTypes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Vehicle>> CreateVehicleAsync(xDTO.Vehicle item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.Vehicle>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Vehicles/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.VehicleFeatureType>> CreateVehicleFeatureTypeAsync(xDTO.VehicleFeatureType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.VehicleFeatureType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}VehicleFeatureTypes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.VehicleStatusType>> CreateVehicleStatusTypeAsync(xDTO.VehicleStatusType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.VehicleStatusType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}VehicleStatusTypes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.VehicleType>> CreateVehicleTypeAsync(xDTO.VehicleType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.VehicleType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}VehicleTypes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.VehicleTypeVehicleFeatureType>> CreateVehicleTypeVehicleFeatureTypeAsync(xDTO.VehicleTypeVehicleFeatureType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.VehicleTypeVehicleFeatureType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}VehicleTypeVehicleFeatureTypes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.VehicleVehicleFeatureType>> CreateVehicleVehicleFeatureTypeAsync(xDTO.VehicleVehicleFeatureType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.VehicleVehicleFeatureType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}VehicleVehicleFeatureTypes/", item);
				return retVal;
			}

		#endregion Create



		#region Update

			public async Task<IHttpCallResultCGHT<xDTO.Driver>> UpdateDriverAsync(xDTO.Driver item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.Driver>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Drivers/{item.DriverId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Feedback>> UpdateFeedbackAsync(xDTO.Feedback item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.Feedback>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Feedbacks/{item.FeedbackId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.FeedbackType>> UpdateFeedbackTypeAsync(xDTO.FeedbackType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.FeedbackType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}FeedbackTypes/{item.FeedbackTypeId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.GenderType>> UpdateGenderTypeAsync(xDTO.GenderType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.GenderType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}GenderTypes/{item.GenderTypeId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Holiday>> UpdateHolidayAsync(xDTO.Holiday item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.Holiday>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Holidays/{item.HolidayId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.LanguageType>> UpdateLanguageTypeAsync(xDTO.LanguageType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.LanguageType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}LanguageTypes/{item.LanguageTypeId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Location>> UpdateLocationAsync(xDTO.Location item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.Location>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Locations/{item.LocationId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.NotificationType>> UpdateNotificationTypeAsync(xDTO.NotificationType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.NotificationType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}NotificationTypes/{item.NotificationTypeId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Reservation>> UpdateReservationAsync(xDTO.Reservation item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.Reservation>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Reservations/{item.ReservationId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.ReservationCancellationReasonType>> UpdateReservationCancellationReasonTypeAsync(xDTO.ReservationCancellationReasonType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.ReservationCancellationReasonType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}ReservationCancellationReasonTypes/{item.ReservationCancellationReasonTypeId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.ReservationRequest>> UpdateReservationRequestAsync(xDTO.ReservationRequest item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.ReservationRequest>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}ReservationRequests/{item.ReservationRequestId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.ReservationRequestCancellationReasonType>> UpdateReservationRequestCancellationReasonTypeAsync(xDTO.ReservationRequestCancellationReasonType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.ReservationRequestCancellationReasonType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}ReservationRequestCancellationReasonTypes/{item.ReservationRequestCancellationReasonTypeId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.ReservationRequestOption>> UpdateReservationRequestOptionAsync(xDTO.ReservationRequestOption item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.ReservationRequestOption>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}ReservationRequestOptions/{item.ReservationRequestOptionId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.ReservationRequestStatusType>> UpdateReservationRequestStatusTypeAsync(xDTO.ReservationRequestStatusType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.ReservationRequestStatusType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}ReservationRequestStatusTypes/{item.ReservationRequestStatusTypeId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.ReservationStatusType>> UpdateReservationStatusTypeAsync(xDTO.ReservationStatusType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.ReservationStatusType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}ReservationStatusTypes/{item.ReservationStatusTypeId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Ride>> UpdateRideAsync(xDTO.Ride item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.Ride>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Rides/{item.RideId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.RidePosition>> UpdateRidePositionAsync(xDTO.RidePosition item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.RidePosition>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}RidePositions/{item.RidePositionId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.RideServiceType>> UpdateRideServiceTypeAsync(xDTO.RideServiceType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.RideServiceType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}RideServiceTypes/{item.RideServiceTypeId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.User>> UpdateUserAsync(xDTO.User item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.User>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Users/{item.UserId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.UsersLocation>> UpdateUsersLocationAsync(xDTO.UsersLocation item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.UsersLocation>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}UsersLocations/{item.UserId}/{item.LocationId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.UsersNotificationType>> UpdateUsersNotificationTypeAsync(xDTO.UsersNotificationType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.UsersNotificationType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}UsersNotificationTypes/{item.UserId}/{item.NotificationTypeId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Vehicle>> UpdateVehicleAsync(xDTO.Vehicle item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.Vehicle>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Vehicles/{item.VehicleId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.VehicleFeatureType>> UpdateVehicleFeatureTypeAsync(xDTO.VehicleFeatureType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.VehicleFeatureType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}VehicleFeatureTypes/{item.VehicleFeatureTypeId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.VehicleStatusType>> UpdateVehicleStatusTypeAsync(xDTO.VehicleStatusType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.VehicleStatusType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}VehicleStatusTypes/{item.VehicleStatusTypeId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.VehicleType>> UpdateVehicleTypeAsync(xDTO.VehicleType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.VehicleType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}VehicleTypes/{item.VehicleTypeId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.VehicleTypeVehicleFeatureType>> UpdateVehicleTypeVehicleFeatureTypeAsync(xDTO.VehicleTypeVehicleFeatureType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.VehicleTypeVehicleFeatureType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}VehicleTypeVehicleFeatureTypes/{item.VehicleTypeId}/{item.VehicleFeatureTypeId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.VehicleVehicleFeatureType>> UpdateVehicleVehicleFeatureTypeAsync(xDTO.VehicleVehicleFeatureType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.VehicleVehicleFeatureType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}VehicleVehicleFeatureTypes/{item.VehicleId}/{item.VehicleFeatureTypeId}", item);
				return retVal;
			}

		#endregion Update



		#region Delete

		public async Task<IHttpCallResultCGHT<xDTO.Driver>> DeleteDriverAsync(int driverId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.Driver>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Drivers/{driverId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Feedback>> DeleteFeedbackAsync(System.Guid feedbackId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.Feedback>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Feedbacks/{feedbackId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.FeedbackType>> DeleteFeedbackTypeAsync(int feedbackTypeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.FeedbackType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}FeedbackTypes/{feedbackTypeId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.GenderType>> DeleteGenderTypeAsync(int genderTypeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.GenderType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}GenderTypes/{genderTypeId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Holiday>> DeleteHolidayAsync(int holidayId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.Holiday>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Holidays/{holidayId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.LanguageType>> DeleteLanguageTypeAsync(int languageTypeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.LanguageType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}LanguageTypes/{languageTypeId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Location>> DeleteLocationAsync(System.Guid locationId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.Location>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Locations/{locationId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.NotificationType>> DeleteNotificationTypeAsync(int notificationTypeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.NotificationType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}NotificationTypes/{notificationTypeId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Reservation>> DeleteReservationAsync(System.Guid reservationId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.Reservation>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Reservations/{reservationId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.ReservationCancellationReasonType>> DeleteReservationCancellationReasonTypeAsync(int reservationCancellationReasonTypeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.ReservationCancellationReasonType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}ReservationCancellationReasonTypes/{reservationCancellationReasonTypeId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.ReservationRequest>> DeleteReservationRequestAsync(System.Guid reservationRequestId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.ReservationRequest>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}ReservationRequests/{reservationRequestId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.ReservationRequestCancellationReasonType>> DeleteReservationRequestCancellationReasonTypeAsync(int reservationRequestCancellationReasonTypeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.ReservationRequestCancellationReasonType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}ReservationRequestCancellationReasonTypes/{reservationRequestCancellationReasonTypeId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.ReservationRequestOption>> DeleteReservationRequestOptionAsync(int reservationRequestOptionId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.ReservationRequestOption>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}ReservationRequestOptions/{reservationRequestOptionId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.ReservationRequestStatusType>> DeleteReservationRequestStatusTypeAsync(int reservationRequestStatusTypeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.ReservationRequestStatusType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}ReservationRequestStatusTypes/{reservationRequestStatusTypeId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.ReservationStatusType>> DeleteReservationStatusTypeAsync(int reservationStatusTypeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.ReservationStatusType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}ReservationStatusTypes/{reservationStatusTypeId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Ride>> DeleteRideAsync(System.Guid rideId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.Ride>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Rides/{rideId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.RidePosition>> DeleteRidePositionAsync(System.Guid ridePositionId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.RidePosition>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}RidePositions/{ridePositionId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.RideServiceType>> DeleteRideServiceTypeAsync(int rideServiceTypeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.RideServiceType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}RideServiceTypes/{rideServiceTypeId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.User>> DeleteUserAsync(int userId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.User>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Users/{userId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.UsersLocation>> DeleteUsersLocationAsync(int userId, System.Guid locationId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.UsersLocation>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}UsersLocations/{userId}/{locationId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.UsersNotificationType>> DeleteUsersNotificationTypeAsync(int userId, int notificationTypeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.UsersNotificationType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}UsersNotificationTypes/{userId}/{notificationTypeId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Vehicle>> DeleteVehicleAsync(int vehicleId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.Vehicle>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Vehicles/{vehicleId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.VehicleFeatureType>> DeleteVehicleFeatureTypeAsync(int vehicleFeatureTypeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.VehicleFeatureType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}VehicleFeatureTypes/{vehicleFeatureTypeId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.VehicleStatusType>> DeleteVehicleStatusTypeAsync(int vehicleStatusTypeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.VehicleStatusType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}VehicleStatusTypes/{vehicleStatusTypeId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.VehicleType>> DeleteVehicleTypeAsync(int vehicleTypeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.VehicleType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}VehicleTypes/{vehicleTypeId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.VehicleTypeVehicleFeatureType>> DeleteVehicleTypeVehicleFeatureTypeAsync(int vehicleTypeId, int vehicleFeatureTypeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.VehicleTypeVehicleFeatureType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}VehicleTypeVehicleFeatureTypes/{vehicleTypeId}/{vehicleFeatureTypeId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.VehicleVehicleFeatureType>> DeleteVehicleVehicleFeatureTypeAsync(int vehicleId, int vehicleFeatureTypeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.VehicleVehicleFeatureType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}VehicleVehicleFeatureTypes/{vehicleId}/{vehicleFeatureTypeId}");
			return retVal;
		}

		#endregion Delete


	}
}
