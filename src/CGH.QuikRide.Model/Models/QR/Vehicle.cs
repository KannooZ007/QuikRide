// <auto-generated> - Template:ModelsBackedByDto, Version:1.1, Id:f1539c0d-024f-4b1f-b346-132cdd9dd31f
using CodeGenHero.Logging;
using CodeGenHero.DataService;
using System;
using System.Collections.Generic;
using System.Linq;
using CGH.QuikRide.API.Client.Interface;
using CGH.QuikRide.Model.QR.Interface;
using xDTO = CGH.QuikRide.DTO.QR;

namespace CGH.QuikRide.Model.QR
{

	public class LoadRequestVehicle : EventArgs
	{
		public LoadRequestVehicle(string propertyNameRequestingLoad)
		{
			PropertyNameRequestingLoad = propertyNameRequestingLoad;
		}

		public string PropertyNameRequestingLoad { get; set; }
	}


	public partial class Vehicle : BaseModel<IWebApiDataServiceQR>, IVehicle
	{
		public event EventHandler<LoadRequestVehicle> OnLazyLoadRequest = delegate { }; // Empty delegate. Thus we are sure that value is always != null because no one outside of the class can change it.
		private xDTO.Vehicle _dto = null;

		public Vehicle(ILoggingService log, IDataService<IWebApiDataServiceQR> dataService) : base(log, dataService)
		{
			_dto = new xDTO.Vehicle();
			OnLazyLoadRequest += HandleLazyLoadRequest;
		}

		public Vehicle(ILoggingService log, IDataService<IWebApiDataServiceQR> dataService, xDTO.Vehicle dto) : this(log, dataService)
		{
			_dto = dto;
		}


		public virtual string CreatedBy { get { return _dto.CreatedBy; } }
		public virtual System.DateTime CreatedUtcDate { get { return _dto.CreatedUtcDate; } }
		public virtual int DataVersion { get { return _dto.DataVersion; } }
		public virtual System.DateTime? EndDateInService { get { return _dto.EndDateInService; } }
		public virtual bool IsDeleted { get { return _dto.IsDeleted; } }
		public virtual double? Latitude { get { return _dto.Latitude; } }
		public virtual string LicensePlateNumber { get { return _dto.LicensePlateNumber; } }
		public virtual double? Longitude { get { return _dto.Longitude; } }
		public virtual string ModifiedBy { get { return _dto.ModifiedBy; } }
		public virtual System.DateTime ModifiedUtcDate { get { return _dto.ModifiedUtcDate; } }
		public virtual System.DateTime StartDateInService { get { return _dto.StartDateInService; } }
		public virtual int VehicleId { get { return _dto.VehicleId; } }
		public virtual int VehicleStatusTypeId { get { return _dto.VehicleStatusTypeId; } }
		public virtual int VehicleTypeId { get { return _dto.VehicleTypeId; } }
		public virtual string Vin { get { return _dto.Vin; } }

		private IVehicleStatusType _vehicleStatusType = null; // Foreign Key
		private IVehicleType _vehicleType = null; // Foreign Key
		private List<IDriver> _drivers = null; // Reverse Navigation
		private List<IRide> _rides = null; // Reverse Navigation
		private List<IVehicleVehicleFeatureType> _vehicleVehicleFeatureTypes = null; // Reverse Navigation


		public virtual IVehicleStatusType VehicleStatusType
		{
			get
			{
				if (_vehicleStatusType == null && _dto != null && _dto.VehicleStatusType != null)
				{
					_vehicleStatusType = new VehicleStatusType(Log, DataService, _dto.VehicleStatusType);
				}

				return _vehicleStatusType;
			}
		}

		public virtual IVehicleType VehicleType
		{
			get
			{
				if (_vehicleType == null && _dto != null && _dto.VehicleType != null)
				{
					_vehicleType = new VehicleType(Log, DataService, _dto.VehicleType);
				}

				return _vehicleType;
			}
		}

		public virtual List<IDriver> Drivers
		{
			get
			{
				if (_drivers == null && _dto != null)
				{	// The core DTO object is loaded, but this property is not loaded.
					if (_dto.Drivers != null)
					{	// The core DTO object has data for this property, load it into the model.
						_drivers = new List<IDriver>();
						foreach (var dtoItem in _dto.Drivers)
						{
							_drivers.Add(new Driver(Log, DataService, dtoItem));
						}
					}
					else
					{	// Trigger the load data request - The core DTO object is loaded and does not have data for this property.
						OnLazyLoadRequest(this, new LoadRequestVehicle(nameof(Drivers)));
					}
				}

				return _drivers;
			}
		}

		public virtual List<IRide> Rides
		{
			get
			{
				if (_rides == null && _dto != null)
				{	// The core DTO object is loaded, but this property is not loaded.
					if (_dto.Rides != null)
					{	// The core DTO object has data for this property, load it into the model.
						_rides = new List<IRide>();
						foreach (var dtoItem in _dto.Rides)
						{
							_rides.Add(new Ride(Log, DataService, dtoItem));
						}
					}
					else
					{	// Trigger the load data request - The core DTO object is loaded and does not have data for this property.
						OnLazyLoadRequest(this, new LoadRequestVehicle(nameof(Rides)));
					}
				}

				return _rides;
			}
		}

		public virtual List<IVehicleVehicleFeatureType> VehicleVehicleFeatureTypes
		{
			get
			{
				if (_vehicleVehicleFeatureTypes == null && _dto != null)
				{	// The core DTO object is loaded, but this property is not loaded.
					if (_dto.VehicleVehicleFeatureTypes != null)
					{	// The core DTO object has data for this property, load it into the model.
						_vehicleVehicleFeatureTypes = new List<IVehicleVehicleFeatureType>();
						foreach (var dtoItem in _dto.VehicleVehicleFeatureTypes)
						{
							_vehicleVehicleFeatureTypes.Add(new VehicleVehicleFeatureType(Log, DataService, dtoItem));
						}
					}
					else
					{	// Trigger the load data request - The core DTO object is loaded and does not have data for this property.
						OnLazyLoadRequest(this, new LoadRequestVehicle(nameof(VehicleVehicleFeatureTypes)));
					}
				}

				return _vehicleVehicleFeatureTypes;
			}
		}



	}
}
