// <auto-generated> - Template:ModelsBackedByDto, Version:1.1, Id:f1539c0d-024f-4b1f-b346-132cdd9dd31f
using CodeGenHero.Logging;
using CodeGenHero.DataService;
using System;
using System.Collections.Generic;
using System.Linq;
using CGH.QuikRide.API.Client.Interface;
using CGH.QuikRide.Model.QR.Interface;
using xDTO = CGH.QuikRide.DTO.QR;

namespace CGH.QuikRide.Model.QR
{

	public class LoadRequestLanguageType : EventArgs
	{
		public LoadRequestLanguageType(string propertyNameRequestingLoad)
		{
			PropertyNameRequestingLoad = propertyNameRequestingLoad;
		}

		public string PropertyNameRequestingLoad { get; set; }
	}


	public partial class LanguageType : BaseModel<IWebApiDataServiceQR>, ILanguageType
	{
		public event EventHandler<LoadRequestLanguageType> OnLazyLoadRequest = delegate { }; // Empty delegate. Thus we are sure that value is always != null because no one outside of the class can change it.
		private xDTO.LanguageType _dto = null;

		public LanguageType(ILoggingService log, IDataService<IWebApiDataServiceQR> dataService) : base(log, dataService)
		{
			_dto = new xDTO.LanguageType();
			OnLazyLoadRequest += HandleLazyLoadRequest;
		}

		public LanguageType(ILoggingService log, IDataService<IWebApiDataServiceQR> dataService, xDTO.LanguageType dto) : this(log, dataService)
		{
			_dto = dto;
		}


		public virtual string Code { get { return _dto.Code; } }
		public virtual string CreatedBy { get { return _dto.CreatedBy; } }
		public virtual System.DateTime CreatedUtcDate { get { return _dto.CreatedUtcDate; } }
		public virtual int DataVersion { get { return _dto.DataVersion; } }
		public virtual int DisplayPriority { get { return _dto.DisplayPriority; } }
		public virtual string DisplayText { get { return _dto.DisplayText; } }
		public virtual bool IsDeleted { get { return _dto.IsDeleted; } }
		public virtual int? LanguageCultureIdentifier { get { return _dto.LanguageCultureIdentifier; } }
		public virtual int LanguageTypeId { get { return _dto.LanguageTypeId; } }
		public virtual string ModifiedBy { get { return _dto.ModifiedBy; } }
		public virtual System.DateTime ModifiedUtcDate { get { return _dto.ModifiedUtcDate; } }
		public virtual string NativeName { get { return _dto.NativeName; } }
		public virtual string ThreeLetterIsoLanguageName { get { return _dto.ThreeLetterIsoLanguageName; } }
		public virtual string TwoLetterIsoLanguageName { get { return _dto.TwoLetterIsoLanguageName; } }

		private List<IFeedbackType> _feedbackTypes = null; // Reverse Navigation
		private List<IGenderType> _genderTypes = null; // Reverse Navigation
		private List<INotificationType> _notificationTypes = null; // Reverse Navigation
		private List<IReservationCancellationReasonType> _reservationCancellationReasonTypes = null; // Reverse Navigation
		private List<IReservationRequestCancellationReasonType> _reservationRequestCancellationReasonTypes = null; // Reverse Navigation
		private List<IReservationRequestStatusType> _reservationRequestStatusTypes = null; // Reverse Navigation
		private List<IReservationStatusType> _reservationStatusTypes = null; // Reverse Navigation
		private List<IRideServiceType> _rideServiceTypes = null; // Reverse Navigation
		private List<IVehicleFeatureType> _vehicleFeatureTypes = null; // Reverse Navigation
		private List<IVehicleStatusType> _vehicleStatusTypes = null; // Reverse Navigation
		private List<IVehicleType> _vehicleTypes = null; // Reverse Navigation


		public virtual List<IFeedbackType> FeedbackTypes
		{
			get
			{
				if (_feedbackTypes == null && _dto != null)
				{	// The core DTO object is loaded, but this property is not loaded.
					if (_dto.FeedbackTypes != null)
					{	// The core DTO object has data for this property, load it into the model.
						_feedbackTypes = new List<IFeedbackType>();
						foreach (var dtoItem in _dto.FeedbackTypes)
						{
							_feedbackTypes.Add(new FeedbackType(Log, DataService, dtoItem));
						}
					}
					else
					{	// Trigger the load data request - The core DTO object is loaded and does not have data for this property.
						OnLazyLoadRequest(this, new LoadRequestLanguageType(nameof(FeedbackTypes)));
					}
				}

				return _feedbackTypes;
			}
		}

		public virtual List<IGenderType> GenderTypes
		{
			get
			{
				if (_genderTypes == null && _dto != null)
				{	// The core DTO object is loaded, but this property is not loaded.
					if (_dto.GenderTypes != null)
					{	// The core DTO object has data for this property, load it into the model.
						_genderTypes = new List<IGenderType>();
						foreach (var dtoItem in _dto.GenderTypes)
						{
							_genderTypes.Add(new GenderType(Log, DataService, dtoItem));
						}
					}
					else
					{	// Trigger the load data request - The core DTO object is loaded and does not have data for this property.
						OnLazyLoadRequest(this, new LoadRequestLanguageType(nameof(GenderTypes)));
					}
				}

				return _genderTypes;
			}
		}

		public virtual List<INotificationType> NotificationTypes
		{
			get
			{
				if (_notificationTypes == null && _dto != null)
				{	// The core DTO object is loaded, but this property is not loaded.
					if (_dto.NotificationTypes != null)
					{	// The core DTO object has data for this property, load it into the model.
						_notificationTypes = new List<INotificationType>();
						foreach (var dtoItem in _dto.NotificationTypes)
						{
							_notificationTypes.Add(new NotificationType(Log, DataService, dtoItem));
						}
					}
					else
					{	// Trigger the load data request - The core DTO object is loaded and does not have data for this property.
						OnLazyLoadRequest(this, new LoadRequestLanguageType(nameof(NotificationTypes)));
					}
				}

				return _notificationTypes;
			}
		}

		public virtual List<IReservationCancellationReasonType> ReservationCancellationReasonTypes
		{
			get
			{
				if (_reservationCancellationReasonTypes == null && _dto != null)
				{	// The core DTO object is loaded, but this property is not loaded.
					if (_dto.ReservationCancellationReasonTypes != null)
					{	// The core DTO object has data for this property, load it into the model.
						_reservationCancellationReasonTypes = new List<IReservationCancellationReasonType>();
						foreach (var dtoItem in _dto.ReservationCancellationReasonTypes)
						{
							_reservationCancellationReasonTypes.Add(new ReservationCancellationReasonType(Log, DataService, dtoItem));
						}
					}
					else
					{	// Trigger the load data request - The core DTO object is loaded and does not have data for this property.
						OnLazyLoadRequest(this, new LoadRequestLanguageType(nameof(ReservationCancellationReasonTypes)));
					}
				}

				return _reservationCancellationReasonTypes;
			}
		}

		public virtual List<IReservationRequestCancellationReasonType> ReservationRequestCancellationReasonTypes
		{
			get
			{
				if (_reservationRequestCancellationReasonTypes == null && _dto != null)
				{	// The core DTO object is loaded, but this property is not loaded.
					if (_dto.ReservationRequestCancellationReasonTypes != null)
					{	// The core DTO object has data for this property, load it into the model.
						_reservationRequestCancellationReasonTypes = new List<IReservationRequestCancellationReasonType>();
						foreach (var dtoItem in _dto.ReservationRequestCancellationReasonTypes)
						{
							_reservationRequestCancellationReasonTypes.Add(new ReservationRequestCancellationReasonType(Log, DataService, dtoItem));
						}
					}
					else
					{	// Trigger the load data request - The core DTO object is loaded and does not have data for this property.
						OnLazyLoadRequest(this, new LoadRequestLanguageType(nameof(ReservationRequestCancellationReasonTypes)));
					}
				}

				return _reservationRequestCancellationReasonTypes;
			}
		}

		public virtual List<IReservationRequestStatusType> ReservationRequestStatusTypes
		{
			get
			{
				if (_reservationRequestStatusTypes == null && _dto != null)
				{	// The core DTO object is loaded, but this property is not loaded.
					if (_dto.ReservationRequestStatusTypes != null)
					{	// The core DTO object has data for this property, load it into the model.
						_reservationRequestStatusTypes = new List<IReservationRequestStatusType>();
						foreach (var dtoItem in _dto.ReservationRequestStatusTypes)
						{
							_reservationRequestStatusTypes.Add(new ReservationRequestStatusType(Log, DataService, dtoItem));
						}
					}
					else
					{	// Trigger the load data request - The core DTO object is loaded and does not have data for this property.
						OnLazyLoadRequest(this, new LoadRequestLanguageType(nameof(ReservationRequestStatusTypes)));
					}
				}

				return _reservationRequestStatusTypes;
			}
		}

		public virtual List<IReservationStatusType> ReservationStatusTypes
		{
			get
			{
				if (_reservationStatusTypes == null && _dto != null)
				{	// The core DTO object is loaded, but this property is not loaded.
					if (_dto.ReservationStatusTypes != null)
					{	// The core DTO object has data for this property, load it into the model.
						_reservationStatusTypes = new List<IReservationStatusType>();
						foreach (var dtoItem in _dto.ReservationStatusTypes)
						{
							_reservationStatusTypes.Add(new ReservationStatusType(Log, DataService, dtoItem));
						}
					}
					else
					{	// Trigger the load data request - The core DTO object is loaded and does not have data for this property.
						OnLazyLoadRequest(this, new LoadRequestLanguageType(nameof(ReservationStatusTypes)));
					}
				}

				return _reservationStatusTypes;
			}
		}

		public virtual List<IRideServiceType> RideServiceTypes
		{
			get
			{
				if (_rideServiceTypes == null && _dto != null)
				{	// The core DTO object is loaded, but this property is not loaded.
					if (_dto.RideServiceTypes != null)
					{	// The core DTO object has data for this property, load it into the model.
						_rideServiceTypes = new List<IRideServiceType>();
						foreach (var dtoItem in _dto.RideServiceTypes)
						{
							_rideServiceTypes.Add(new RideServiceType(Log, DataService, dtoItem));
						}
					}
					else
					{	// Trigger the load data request - The core DTO object is loaded and does not have data for this property.
						OnLazyLoadRequest(this, new LoadRequestLanguageType(nameof(RideServiceTypes)));
					}
				}

				return _rideServiceTypes;
			}
		}

		public virtual List<IVehicleFeatureType> VehicleFeatureTypes
		{
			get
			{
				if (_vehicleFeatureTypes == null && _dto != null)
				{	// The core DTO object is loaded, but this property is not loaded.
					if (_dto.VehicleFeatureTypes != null)
					{	// The core DTO object has data for this property, load it into the model.
						_vehicleFeatureTypes = new List<IVehicleFeatureType>();
						foreach (var dtoItem in _dto.VehicleFeatureTypes)
						{
							_vehicleFeatureTypes.Add(new VehicleFeatureType(Log, DataService, dtoItem));
						}
					}
					else
					{	// Trigger the load data request - The core DTO object is loaded and does not have data for this property.
						OnLazyLoadRequest(this, new LoadRequestLanguageType(nameof(VehicleFeatureTypes)));
					}
				}

				return _vehicleFeatureTypes;
			}
		}

		public virtual List<IVehicleStatusType> VehicleStatusTypes
		{
			get
			{
				if (_vehicleStatusTypes == null && _dto != null)
				{	// The core DTO object is loaded, but this property is not loaded.
					if (_dto.VehicleStatusTypes != null)
					{	// The core DTO object has data for this property, load it into the model.
						_vehicleStatusTypes = new List<IVehicleStatusType>();
						foreach (var dtoItem in _dto.VehicleStatusTypes)
						{
							_vehicleStatusTypes.Add(new VehicleStatusType(Log, DataService, dtoItem));
						}
					}
					else
					{	// Trigger the load data request - The core DTO object is loaded and does not have data for this property.
						OnLazyLoadRequest(this, new LoadRequestLanguageType(nameof(VehicleStatusTypes)));
					}
				}

				return _vehicleStatusTypes;
			}
		}

		public virtual List<IVehicleType> VehicleTypes
		{
			get
			{
				if (_vehicleTypes == null && _dto != null)
				{	// The core DTO object is loaded, but this property is not loaded.
					if (_dto.VehicleTypes != null)
					{	// The core DTO object has data for this property, load it into the model.
						_vehicleTypes = new List<IVehicleType>();
						foreach (var dtoItem in _dto.VehicleTypes)
						{
							_vehicleTypes.Add(new VehicleType(Log, DataService, dtoItem));
						}
					}
					else
					{	// Trigger the load data request - The core DTO object is loaded and does not have data for this property.
						OnLazyLoadRequest(this, new LoadRequestLanguageType(nameof(VehicleTypes)));
					}
				}

				return _vehicleTypes;
			}
		}



	}
}
