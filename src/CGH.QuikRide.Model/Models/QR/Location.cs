// <auto-generated> - Template:ModelsBackedByDto, Version:1.1, Id:f1539c0d-024f-4b1f-b346-132cdd9dd31f
using CodeGenHero.Logging;
using CodeGenHero.DataService;
using System;
using System.Collections.Generic;
using System.Linq;
using CGH.QuikRide.API.Client.Interface;
using CGH.QuikRide.Model.QR.Interface;
using xDTO = CGH.QuikRide.DTO.QR;

namespace CGH.QuikRide.Model.QR
{

	public class LoadRequestLocation : EventArgs
	{
		public LoadRequestLocation(string propertyNameRequestingLoad)
		{
			PropertyNameRequestingLoad = propertyNameRequestingLoad;
		}

		public string PropertyNameRequestingLoad { get; set; }
	}


	public partial class Location : BaseModel<IWebApiDataServiceQR>, ILocation
	{
		public event EventHandler<LoadRequestLocation> OnLazyLoadRequest = delegate { }; // Empty delegate. Thus we are sure that value is always != null because no one outside of the class can change it.
		private xDTO.Location _dto = null;

		public Location(ILoggingService log, IDataService<IWebApiDataServiceQR> dataService) : base(log, dataService)
		{
			_dto = new xDTO.Location();
			OnLazyLoadRequest += HandleLazyLoadRequest;
		}

		public Location(ILoggingService log, IDataService<IWebApiDataServiceQR> dataService, xDTO.Location dto) : this(log, dataService)
		{
			_dto = dto;
		}


		public virtual string AddressLine1 { get { return _dto.AddressLine1; } }
		public virtual string AddressLine2 { get { return _dto.AddressLine2; } }
		public virtual string City { get { return _dto.City; } }
		public virtual string CreatedBy { get { return _dto.CreatedBy; } }
		public virtual System.DateTime CreatedUtcDate { get { return _dto.CreatedUtcDate; } }
		public virtual int DataVersion { get { return _dto.DataVersion; } }
		public virtual bool IsDeleted { get { return _dto.IsDeleted; } }
		public virtual double? Latitude { get { return _dto.Latitude; } }
		public virtual System.Guid LocationId { get { return _dto.LocationId; } }
		public virtual double? Longitude { get { return _dto.Longitude; } }
		public virtual string ModifiedBy { get { return _dto.ModifiedBy; } }
		public virtual System.DateTime ModifiedUtcDate { get { return _dto.ModifiedUtcDate; } }
		public virtual string Name { get { return _dto.Name; } }
		public virtual string PostalCode { get { return _dto.PostalCode; } }
		public virtual string State { get { return _dto.State; } }

		private List<IReservation> _reservations = null; // Reverse Navigation
		private List<IReservationRequest> _destinationLocation = null; // Reverse Navigation
		private List<IReservationRequest> _pickupLocation = null; // Reverse Navigation
		private List<IUsersLocation> _usersLocations = null; // Reverse Navigation


		public virtual List<IReservation> Reservations
		{
			get
			{
				if (_reservations == null && _dto != null)
				{	// The core DTO object is loaded, but this property is not loaded.
					if (_dto.Reservations != null)
					{	// The core DTO object has data for this property, load it into the model.
						_reservations = new List<IReservation>();
						foreach (var dtoItem in _dto.Reservations)
						{
							_reservations.Add(new Reservation(Log, DataService, dtoItem));
						}
					}
					else
					{	// Trigger the load data request - The core DTO object is loaded and does not have data for this property.
						OnLazyLoadRequest(this, new LoadRequestLocation(nameof(Reservations)));
					}
				}

				return _reservations;
			}
		}

		public virtual List<IReservationRequest> DestinationLocation
		{
			get
			{
				if (_destinationLocation == null && _dto != null)
				{	// The core DTO object is loaded, but this property is not loaded.
					if (_dto.DestinationLocation != null)
					{	// The core DTO object has data for this property, load it into the model.
						_destinationLocation = new List<IReservationRequest>();
						foreach (var dtoItem in _dto.DestinationLocation)
						{
							_destinationLocation.Add(new ReservationRequest(Log, DataService, dtoItem));
						}
					}
					else
					{	// Trigger the load data request - The core DTO object is loaded and does not have data for this property.
						OnLazyLoadRequest(this, new LoadRequestLocation(nameof(DestinationLocation)));
					}
				}

				return _destinationLocation;
			}
		}

		public virtual List<IReservationRequest> PickupLocation
		{
			get
			{
				if (_pickupLocation == null && _dto != null)
				{	// The core DTO object is loaded, but this property is not loaded.
					if (_dto.PickupLocation != null)
					{	// The core DTO object has data for this property, load it into the model.
						_pickupLocation = new List<IReservationRequest>();
						foreach (var dtoItem in _dto.PickupLocation)
						{
							_pickupLocation.Add(new ReservationRequest(Log, DataService, dtoItem));
						}
					}
					else
					{	// Trigger the load data request - The core DTO object is loaded and does not have data for this property.
						OnLazyLoadRequest(this, new LoadRequestLocation(nameof(PickupLocation)));
					}
				}

				return _pickupLocation;
			}
		}

		public virtual List<IUsersLocation> UsersLocations
		{
			get
			{
				if (_usersLocations == null && _dto != null)
				{	// The core DTO object is loaded, but this property is not loaded.
					if (_dto.UsersLocations != null)
					{	// The core DTO object has data for this property, load it into the model.
						_usersLocations = new List<IUsersLocation>();
						foreach (var dtoItem in _dto.UsersLocations)
						{
							_usersLocations.Add(new UsersLocation(Log, DataService, dtoItem));
						}
					}
					else
					{	// Trigger the load data request - The core DTO object is loaded and does not have data for this property.
						OnLazyLoadRequest(this, new LoadRequestLocation(nameof(UsersLocations)));
					}
				}

				return _usersLocations;
			}
		}



	}
}
