// <auto-generated> - Template:ModelsBackedByDto, Version:1.1, Id:f1539c0d-024f-4b1f-b346-132cdd9dd31f
using CodeGenHero.Logging;
using CodeGenHero.DataService;
using System;
using System.Collections.Generic;
using System.Linq;
using CGH.QuikRide.API.Client.Interface;
using CGH.QuikRide.Model.QR.Interface;
using xDTO = CGH.QuikRide.DTO.QR;

namespace CGH.QuikRide.Model.QR
{

	public class LoadRequestReservation : EventArgs
	{
		public LoadRequestReservation(string propertyNameRequestingLoad)
		{
			PropertyNameRequestingLoad = propertyNameRequestingLoad;
		}

		public string PropertyNameRequestingLoad { get; set; }
	}


	public partial class Reservation : BaseModel<IWebApiDataServiceQR>, IReservation
	{
		public event EventHandler<LoadRequestReservation> OnLazyLoadRequest = delegate { }; // Empty delegate. Thus we are sure that value is always != null because no one outside of the class can change it.
		private xDTO.Reservation _dto = null;

		public Reservation(ILoggingService log, IDataService<IWebApiDataServiceQR> dataService) : base(log, dataService)
		{
			_dto = new xDTO.Reservation();
			OnLazyLoadRequest += HandleLazyLoadRequest;
		}

		public Reservation(ILoggingService log, IDataService<IWebApiDataServiceQR> dataService, xDTO.Reservation dto) : this(log, dataService)
		{
			_dto = dto;
		}


		public virtual string CreatedBy { get { return _dto.CreatedBy; } }
		public virtual System.DateTime CreatedUtcDate { get { return _dto.CreatedUtcDate; } }
		public virtual int DataVersion { get { return _dto.DataVersion; } }
		public virtual System.Guid DestinationLocationId { get { return _dto.DestinationLocationId; } }
		public virtual bool IsDeleted { get { return _dto.IsDeleted; } }
		public virtual string ModifiedBy { get { return _dto.ModifiedBy; } }
		public virtual System.DateTime ModifiedUtcDate { get { return _dto.ModifiedUtcDate; } }
		public virtual int NumberOfAdults { get { return _dto.NumberOfAdults; } }
		public virtual int NumberOfBabies { get { return _dto.NumberOfBabies; } }
		public virtual int NumberOfBikes { get { return _dto.NumberOfBikes; } }
		public virtual int NumberOfChildren { get { return _dto.NumberOfChildren; } }
		public virtual int NumberOfWheelchairs { get { return _dto.NumberOfWheelchairs; } }
		public virtual bool PersonalCareAttendantIncluded { get { return _dto.PersonalCareAttendantIncluded; } }
		public virtual System.Guid PickUpLocationId { get { return _dto.PickUpLocationId; } }
		public virtual int? ReservationCancellationReasonId { get { return _dto.ReservationCancellationReasonId; } }
		public virtual System.Guid ReservationId { get { return _dto.ReservationId; } }
		public virtual int ReservationRequestOptionId { get { return _dto.ReservationRequestOptionId; } }
		public virtual int ReservationStatusTypeId { get { return _dto.ReservationStatusTypeId; } }
		public virtual int UserId { get { return _dto.UserId; } }

		private ILocation _location = null; // Foreign Key
		private IReservationCancellationReasonType _reservationCancellationReasonType = null; // Foreign Key
		private IReservationRequestOption _reservationRequestOption = null; // Foreign Key
		private IUser _user = null; // Foreign Key
		private List<IReservationRequest> _reservationRequests = null; // Reverse Navigation


		public virtual ILocation Location
		{
			get
			{
				if (_location == null && _dto != null && _dto.Location != null)
				{
					_location = new Location(Log, DataService, _dto.Location);
				}

				return _location;
			}
		}

		public virtual IReservationCancellationReasonType ReservationCancellationReasonType
		{
			get
			{
				if (_reservationCancellationReasonType == null && _dto != null && _dto.ReservationCancellationReasonType != null)
				{
					_reservationCancellationReasonType = new ReservationCancellationReasonType(Log, DataService, _dto.ReservationCancellationReasonType);
				}

				return _reservationCancellationReasonType;
			}
		}

		public virtual IReservationRequestOption ReservationRequestOption
		{
			get
			{
				if (_reservationRequestOption == null && _dto != null && _dto.ReservationRequestOption != null)
				{
					_reservationRequestOption = new ReservationRequestOption(Log, DataService, _dto.ReservationRequestOption);
				}

				return _reservationRequestOption;
			}
		}

		public virtual IUser User
		{
			get
			{
				if (_user == null && _dto != null && _dto.User != null)
				{
					_user = new User(Log, DataService, _dto.User);
				}

				return _user;
			}
		}

		public virtual List<IReservationRequest> ReservationRequests
		{
			get
			{
				if (_reservationRequests == null && _dto != null)
				{	// The core DTO object is loaded, but this property is not loaded.
					if (_dto.ReservationRequests != null)
					{	// The core DTO object has data for this property, load it into the model.
						_reservationRequests = new List<IReservationRequest>();
						foreach (var dtoItem in _dto.ReservationRequests)
						{
							_reservationRequests.Add(new ReservationRequest(Log, DataService, dtoItem));
						}
					}
					else
					{	// Trigger the load data request - The core DTO object is loaded and does not have data for this property.
						OnLazyLoadRequest(this, new LoadRequestReservation(nameof(ReservationRequests)));
					}
				}

				return _reservationRequests;
			}
		}



	}
}
