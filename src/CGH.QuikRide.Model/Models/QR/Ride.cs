// <auto-generated> - Template:ModelsBackedByDto, Version:1.1, Id:f1539c0d-024f-4b1f-b346-132cdd9dd31f
using CodeGenHero.Logging;
using CodeGenHero.DataService;
using System;
using System.Collections.Generic;
using System.Linq;
using CGH.QuikRide.API.Client.Interface;
using CGH.QuikRide.Model.QR.Interface;
using xDTO = CGH.QuikRide.DTO.QR;

namespace CGH.QuikRide.Model.QR
{

	public class LoadRequestRide : EventArgs
	{
		public LoadRequestRide(string propertyNameRequestingLoad)
		{
			PropertyNameRequestingLoad = propertyNameRequestingLoad;
		}

		public string PropertyNameRequestingLoad { get; set; }
	}


	public partial class Ride : BaseModel<IWebApiDataServiceQR>, IRide
	{
		public event EventHandler<LoadRequestRide> OnLazyLoadRequest = delegate { }; // Empty delegate. Thus we are sure that value is always != null because no one outside of the class can change it.
		private xDTO.Ride _dto = null;

		public Ride(ILoggingService log, IDataService<IWebApiDataServiceQR> dataService) : base(log, dataService)
		{
			_dto = new xDTO.Ride();
			OnLazyLoadRequest += HandleLazyLoadRequest;
		}

		public Ride(ILoggingService log, IDataService<IWebApiDataServiceQR> dataService, xDTO.Ride dto) : this(log, dataService)
		{
			_dto = dto;
		}


		public virtual string CreatedBy { get { return _dto.CreatedBy; } }
		public virtual System.DateTime CreatedUtcDate { get { return _dto.CreatedUtcDate; } }
		public virtual int DataVersion { get { return _dto.DataVersion; } }
		public virtual int DriverId { get { return _dto.DriverId; } }
		public virtual int? DurationInSeconds { get { return _dto.DurationInSeconds; } }
		public virtual System.DateTime? End { get { return _dto.End; } }
		public virtual double? EndLatitude { get { return _dto.EndLatitude; } }
		public virtual double? EndLongitude { get { return _dto.EndLongitude; } }
		public virtual int? GeoDistance { get { return _dto.GeoDistance; } }
		public virtual bool IsDeleted { get { return _dto.IsDeleted; } }
		public virtual string ModifiedBy { get { return _dto.ModifiedBy; } }
		public virtual System.DateTime ModifiedUtcDate { get { return _dto.ModifiedUtcDate; } }
		public virtual System.Guid RideId { get { return _dto.RideId; } }
		public virtual System.DateTime? Start { get { return _dto.Start; } }
		public virtual double? StartLatitude { get { return _dto.StartLatitude; } }
		public virtual double? StartLongitude { get { return _dto.StartLongitude; } }
		public virtual int UserId { get { return _dto.UserId; } }
		public virtual int VehicleId { get { return _dto.VehicleId; } }

		private IDriver _driver = null; // Foreign Key
		private IUser _user = null; // Foreign Key
		private IVehicle _vehicle = null; // Foreign Key
		private List<IRidePosition> _ridePositions = null; // Reverse Navigation


		public virtual IDriver Driver
		{
			get
			{
				if (_driver == null && _dto != null && _dto.Driver != null)
				{
					_driver = new Driver(Log, DataService, _dto.Driver);
				}

				return _driver;
			}
		}

		public virtual IUser User
		{
			get
			{
				if (_user == null && _dto != null && _dto.User != null)
				{
					_user = new User(Log, DataService, _dto.User);
				}

				return _user;
			}
		}

		public virtual IVehicle Vehicle
		{
			get
			{
				if (_vehicle == null && _dto != null && _dto.Vehicle != null)
				{
					_vehicle = new Vehicle(Log, DataService, _dto.Vehicle);
				}

				return _vehicle;
			}
		}

		public virtual List<IRidePosition> RidePositions
		{
			get
			{
				if (_ridePositions == null && _dto != null)
				{	// The core DTO object is loaded, but this property is not loaded.
					if (_dto.RidePositions != null)
					{	// The core DTO object has data for this property, load it into the model.
						_ridePositions = new List<IRidePosition>();
						foreach (var dtoItem in _dto.RidePositions)
						{
							_ridePositions.Add(new RidePosition(Log, DataService, dtoItem));
						}
					}
					else
					{	// Trigger the load data request - The core DTO object is loaded and does not have data for this property.
						OnLazyLoadRequest(this, new LoadRequestRide(nameof(RidePositions)));
					}
				}

				return _ridePositions;
			}
		}



	}
}
