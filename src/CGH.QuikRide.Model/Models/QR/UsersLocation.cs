// <auto-generated> - Template:ModelsBackedByDto, Version:1.1, Id:f1539c0d-024f-4b1f-b346-132cdd9dd31f
using CodeGenHero.Logging;
using CodeGenHero.DataService;
using System;
using System.Collections.Generic;
using System.Linq;
using CGH.QuikRide.API.Client.Interface;
using CGH.QuikRide.Model.QR.Interface;
using xDTO = CGH.QuikRide.DTO.QR;

namespace CGH.QuikRide.Model.QR
{

	public class LoadRequestUsersLocation : EventArgs
	{
		public LoadRequestUsersLocation(string propertyNameRequestingLoad)
		{
			PropertyNameRequestingLoad = propertyNameRequestingLoad;
		}

		public string PropertyNameRequestingLoad { get; set; }
	}


	public partial class UsersLocation : BaseModel<IWebApiDataServiceQR>, IUsersLocation
	{
		public event EventHandler<LoadRequestUsersLocation> OnLazyLoadRequest = delegate { }; // Empty delegate. Thus we are sure that value is always != null because no one outside of the class can change it.
		private xDTO.UsersLocation _dto = null;

		public UsersLocation(ILoggingService log, IDataService<IWebApiDataServiceQR> dataService) : base(log, dataService)
		{
			_dto = new xDTO.UsersLocation();
			OnLazyLoadRequest += HandleLazyLoadRequest;
		}

		public UsersLocation(ILoggingService log, IDataService<IWebApiDataServiceQR> dataService, xDTO.UsersLocation dto) : this(log, dataService)
		{
			_dto = dto;
		}


		public virtual string CreatedBy { get { return _dto.CreatedBy; } }
		public virtual System.DateTime CreatedUtcDate { get { return _dto.CreatedUtcDate; } }
		public virtual int DataVersion { get { return _dto.DataVersion; } }
		public virtual bool IsDeleted { get { return _dto.IsDeleted; } }
		public virtual System.Guid LocationId { get { return _dto.LocationId; } }
		public virtual string ModifiedBy { get { return _dto.ModifiedBy; } }
		public virtual System.DateTime ModifiedUtcDate { get { return _dto.ModifiedUtcDate; } }
		public virtual int UserId { get { return _dto.UserId; } }

		private ILocation _location = null; // Foreign Key
		private IUser _user = null; // Foreign Key


		public virtual ILocation Location
		{
			get
			{
				if (_location == null)
				{
					OnLazyLoadRequest(this, new LoadRequestUsersLocation(nameof(Location)));
				}

				return _location;
			}
		}

		public virtual IUser User
		{
			get
			{
				if (_user == null)
				{
					OnLazyLoadRequest(this, new LoadRequestUsersLocation(nameof(User)));
				}

				return _user;
			}
		}



	}
}
