// <auto-generated> - Template:RepositoryBase, Version:1.1, Id:70230bd4-f88f-41d8-a9c6-6e40aded5c07
using System;
using System.Data.Entity;
using System.Linq;
using System.Threading.Tasks;
using CGH.QuikRide.Repository.Entities.QR;
using CGH.QuikRide.Repository.Interface;
using CodeGenHero.Repository;
using cghEnums = CodeGenHero.Repository.Enums;

namespace CGH.QuikRide.Repository
{
	public abstract partial class QRRepositoryBase : IQRRepositoryCrud
	{
		private QRDataContext _ctx;

		public QRRepositoryBase(QRDataContext ctx)
		{
			_ctx = ctx;

			// Disable lazy loading - if not, related properties are auto-loaded when
			// they are accessed for the first time, which means they'll be included when
			// we serialize (b/c the serialization process accesses those properties).

			// We don't want that, so we turn it off.  We want to eagerly load them (using Include) manually.

			ctx.Configuration.LazyLoadingEnabled = false;

			if (System.Diagnostics.Debugger.IsAttached)
			{   // Write EF queries to the output console.
				ctx.Database.Log = x => System.Diagnostics.Debug.WriteLine(x);
			}
		}

		#region Generic Operations

		private async Task<IRepositoryActionResult<TEntity>> DeleteAsync<TEntity>(TEntity item) where TEntity : class
		{
			try
			{
				if (item == null)
				{
					return new RepositoryActionResult<TEntity>(null, cghEnums.RepositoryActionStatus.NotFound);
				}

				DbSet<TEntity> itemSet = _ctx.Set<TEntity>();
				itemSet.Remove(item);
				await _ctx.SaveChangesAsync();
				return new RepositoryActionResult<TEntity>(null, cghEnums.RepositoryActionStatus.Deleted);
			}
			catch(Exception ex)
			{
				return new RepositoryActionResult<TEntity>(null, cghEnums.RepositoryActionStatus.Error, ex);
			}
		}

		public IQueryable<TEntity> GetQueryable<TEntity>() where TEntity : class
		{
			return _ctx.Set<TEntity>();
		}

		public async Task<IRepositoryActionResult<TEntity>> InsertAsync<TEntity>(TEntity item) where TEntity : class
		{
			try
			{
				DbSet<TEntity> itemSet = _ctx.Set<TEntity>();
				itemSet.Add(item);
				var result = await _ctx.SaveChangesAsync();
				RunCustomLogicAfterEveryInsert<TEntity>(item, result);

				if (result > 0)
				{
					return new RepositoryActionResult<TEntity>(item, cghEnums.RepositoryActionStatus.Created);
				}
				else
				{
					return new RepositoryActionResult<TEntity>(item, cghEnums.RepositoryActionStatus.NothingModified, null);
				}
			}
			catch(Exception ex)
			{
				return new RepositoryActionResult<TEntity>(null, cghEnums.RepositoryActionStatus.Error, ex);
			}
		}

		private async Task<IRepositoryActionResult<TEntity>> UpdateAsync<TEntity>(TEntity item, TEntity existingItem) where TEntity : class
		{
			try
			{ // only update when a record already exists for this id
				if (existingItem == null)
				{
					return new RepositoryActionResult<TEntity>(item, cghEnums.RepositoryActionStatus.NotFound);
				}

				// change the original entity status to detached; otherwise, we get an error on attach as the entity is already in the dbSet
				// set original entity state to detached
				_ctx.Entry(existingItem).State = EntityState.Detached;
				DbSet<TEntity> itemSet = _ctx.Set<TEntity>();
				itemSet.Attach(item); // attach & save
				_ctx.Entry(item).State = EntityState.Modified; // set the updated entity state to modified, so it gets updated.

				var result = await _ctx.SaveChangesAsync();
				RunCustomLogicAfterEveryUpdate<TEntity>(newItem: item, oldItem: existingItem, numObjectsWritten: result);

				if (result > 0)
				{
					return new RepositoryActionResult<TEntity>(item, cghEnums.RepositoryActionStatus.Updated);
				}
				else
				{
					return new RepositoryActionResult<TEntity>(item, cghEnums.RepositoryActionStatus.NothingModified, null);
				}
			}
			catch (Exception ex)
			{
				return new RepositoryActionResult<TEntity>(null, cghEnums.RepositoryActionStatus.Error, ex);
			}
		}

		partial void RunCustomLogicAfterEveryInsert<T>(T item, int numObjectsWritten) where T : class;

		partial void RunCustomLogicAfterEveryUpdate<T>(T newItem, T oldItem, int numObjectsWritten) where T : class;

		#endregion Generic Operations

		#region Barcode

		public async Task<IRepositoryActionResult<Barcode>> InsertAsync(Barcode item)
		{
			var result = await InsertAsync<Barcode>(item);
			RunCustomLogicAfterInsert_Barcode(item, result);

			return result;
		}


		public IQueryable<Barcode> GetQueryable_Barcode()
		{
			return _ctx.Set<Barcode>();
		}

			public async Task<Barcode> Get_BarcodeAsync(System.Guid barcodeId, int numChildLevels)
			{
				var qryItem = GetQueryable_Barcode().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_Barcode(ref qryItem, barcodeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.BarcodeId == barcodeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_Barcode(ref dbItem, barcodeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<Barcode> GetFirstOrDefaultAsync(Barcode item)
			{
				return await _ctx.Barcodes.Where(x => x.BarcodeId == item.BarcodeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<Barcode>> UpdateAsync(Barcode item)
		{
			var oldItem = await _ctx.Barcodes.FirstOrDefaultAsync(x => x.BarcodeId == item.BarcodeId);
			var result = await UpdateAsync<Barcode>(item, oldItem);
			RunCustomLogicAfterUpdate_Barcode(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<Barcode>> Delete_BarcodeAsync(System.Guid barcodeId)
			{
				return await DeleteAsync<Barcode>(_ctx.Barcodes.Where(x => x.BarcodeId == barcodeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<Barcode>> DeleteAsync(Barcode item)
			{
				return await DeleteAsync<Barcode>(_ctx.Barcodes.Where(x => x.BarcodeId == item.BarcodeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_Barcode(Barcode item, IRepositoryActionResult<Barcode> result);

		partial void RunCustomLogicAfterUpdate_Barcode(Barcode newItem, Barcode oldItem, IRepositoryActionResult<Barcode> result);

		partial void RunCustomLogicOnGetQueryableByPK_Barcode(ref IQueryable<Barcode> qryItem, System.Guid barcodeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_Barcode(ref Barcode dbItem, System.Guid barcodeId, int numChildLevels);



		#endregion Barcode

		#region BarcodeScanLog

		public async Task<IRepositoryActionResult<BarcodeScanLog>> InsertAsync(BarcodeScanLog item)
		{
			var result = await InsertAsync<BarcodeScanLog>(item);
			RunCustomLogicAfterInsert_BarcodeScanLog(item, result);

			return result;
		}


		public IQueryable<BarcodeScanLog> GetQueryable_BarcodeScanLog()
		{
			return _ctx.Set<BarcodeScanLog>();
		}

			public async Task<BarcodeScanLog> Get_BarcodeScanLogAsync(System.Guid barcodeScanLogId, int numChildLevels)
			{
				var qryItem = GetQueryable_BarcodeScanLog().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_BarcodeScanLog(ref qryItem, barcodeScanLogId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.BarcodeScanLogId == barcodeScanLogId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_BarcodeScanLog(ref dbItem, barcodeScanLogId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<BarcodeScanLog> GetFirstOrDefaultAsync(BarcodeScanLog item)
			{
				return await _ctx.BarcodeScanLogs.Where(x => x.BarcodeScanLogId == item.BarcodeScanLogId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<BarcodeScanLog>> UpdateAsync(BarcodeScanLog item)
		{
			var oldItem = await _ctx.BarcodeScanLogs.FirstOrDefaultAsync(x => x.BarcodeScanLogId == item.BarcodeScanLogId);
			var result = await UpdateAsync<BarcodeScanLog>(item, oldItem);
			RunCustomLogicAfterUpdate_BarcodeScanLog(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<BarcodeScanLog>> Delete_BarcodeScanLogAsync(System.Guid barcodeScanLogId)
			{
				return await DeleteAsync<BarcodeScanLog>(_ctx.BarcodeScanLogs.Where(x => x.BarcodeScanLogId == barcodeScanLogId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<BarcodeScanLog>> DeleteAsync(BarcodeScanLog item)
			{
				return await DeleteAsync<BarcodeScanLog>(_ctx.BarcodeScanLogs.Where(x => x.BarcodeScanLogId == item.BarcodeScanLogId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_BarcodeScanLog(BarcodeScanLog item, IRepositoryActionResult<BarcodeScanLog> result);

		partial void RunCustomLogicAfterUpdate_BarcodeScanLog(BarcodeScanLog newItem, BarcodeScanLog oldItem, IRepositoryActionResult<BarcodeScanLog> result);

		partial void RunCustomLogicOnGetQueryableByPK_BarcodeScanLog(ref IQueryable<BarcodeScanLog> qryItem, System.Guid barcodeScanLogId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_BarcodeScanLog(ref BarcodeScanLog dbItem, System.Guid barcodeScanLogId, int numChildLevels);



		#endregion BarcodeScanLog

		#region BarcodeType

		public async Task<IRepositoryActionResult<BarcodeType>> InsertAsync(BarcodeType item)
		{
			var result = await InsertAsync<BarcodeType>(item);
			RunCustomLogicAfterInsert_BarcodeType(item, result);

			return result;
		}


		public IQueryable<BarcodeType> GetQueryable_BarcodeType()
		{
			return _ctx.Set<BarcodeType>();
		}

			public async Task<BarcodeType> Get_BarcodeTypeAsync(int barcodeTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_BarcodeType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_BarcodeType(ref qryItem, barcodeTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.BarcodeTypeId == barcodeTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_BarcodeType(ref dbItem, barcodeTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<BarcodeType> GetFirstOrDefaultAsync(BarcodeType item)
			{
				return await _ctx.BarcodeTypes.Where(x => x.BarcodeTypeId == item.BarcodeTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<BarcodeType>> UpdateAsync(BarcodeType item)
		{
			var oldItem = await _ctx.BarcodeTypes.FirstOrDefaultAsync(x => x.BarcodeTypeId == item.BarcodeTypeId);
			var result = await UpdateAsync<BarcodeType>(item, oldItem);
			RunCustomLogicAfterUpdate_BarcodeType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<BarcodeType>> Delete_BarcodeTypeAsync(int barcodeTypeId)
			{
				return await DeleteAsync<BarcodeType>(_ctx.BarcodeTypes.Where(x => x.BarcodeTypeId == barcodeTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<BarcodeType>> DeleteAsync(BarcodeType item)
			{
				return await DeleteAsync<BarcodeType>(_ctx.BarcodeTypes.Where(x => x.BarcodeTypeId == item.BarcodeTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_BarcodeType(BarcodeType item, IRepositoryActionResult<BarcodeType> result);

		partial void RunCustomLogicAfterUpdate_BarcodeType(BarcodeType newItem, BarcodeType oldItem, IRepositoryActionResult<BarcodeType> result);

		partial void RunCustomLogicOnGetQueryableByPK_BarcodeType(ref IQueryable<BarcodeType> qryItem, int barcodeTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_BarcodeType(ref BarcodeType dbItem, int barcodeTypeId, int numChildLevels);



		#endregion BarcodeType

		#region BarcodeTypeTranslation

		public async Task<IRepositoryActionResult<BarcodeTypeTranslation>> InsertAsync(BarcodeTypeTranslation item)
		{
			var result = await InsertAsync<BarcodeTypeTranslation>(item);
			RunCustomLogicAfterInsert_BarcodeTypeTranslation(item, result);

			return result;
		}


		public IQueryable<BarcodeTypeTranslation> GetQueryable_BarcodeTypeTranslation()
		{
			return _ctx.Set<BarcodeTypeTranslation>();
		}

			public async Task<BarcodeTypeTranslation> Get_BarcodeTypeTranslationAsync(int barcodeTypeTranslationId, int numChildLevels)
			{
				var qryItem = GetQueryable_BarcodeTypeTranslation().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_BarcodeTypeTranslation(ref qryItem, barcodeTypeTranslationId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.BarcodeTypeTranslationId == barcodeTypeTranslationId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_BarcodeTypeTranslation(ref dbItem, barcodeTypeTranslationId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<BarcodeTypeTranslation> GetFirstOrDefaultAsync(BarcodeTypeTranslation item)
			{
				return await _ctx.BarcodeTypeTranslations.Where(x => x.BarcodeTypeTranslationId == item.BarcodeTypeTranslationId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<BarcodeTypeTranslation>> UpdateAsync(BarcodeTypeTranslation item)
		{
			var oldItem = await _ctx.BarcodeTypeTranslations.FirstOrDefaultAsync(x => x.BarcodeTypeTranslationId == item.BarcodeTypeTranslationId);
			var result = await UpdateAsync<BarcodeTypeTranslation>(item, oldItem);
			RunCustomLogicAfterUpdate_BarcodeTypeTranslation(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<BarcodeTypeTranslation>> Delete_BarcodeTypeTranslationAsync(int barcodeTypeTranslationId)
			{
				return await DeleteAsync<BarcodeTypeTranslation>(_ctx.BarcodeTypeTranslations.Where(x => x.BarcodeTypeTranslationId == barcodeTypeTranslationId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<BarcodeTypeTranslation>> DeleteAsync(BarcodeTypeTranslation item)
			{
				return await DeleteAsync<BarcodeTypeTranslation>(_ctx.BarcodeTypeTranslations.Where(x => x.BarcodeTypeTranslationId == item.BarcodeTypeTranslationId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_BarcodeTypeTranslation(BarcodeTypeTranslation item, IRepositoryActionResult<BarcodeTypeTranslation> result);

		partial void RunCustomLogicAfterUpdate_BarcodeTypeTranslation(BarcodeTypeTranslation newItem, BarcodeTypeTranslation oldItem, IRepositoryActionResult<BarcodeTypeTranslation> result);

		partial void RunCustomLogicOnGetQueryableByPK_BarcodeTypeTranslation(ref IQueryable<BarcodeTypeTranslation> qryItem, int barcodeTypeTranslationId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_BarcodeTypeTranslation(ref BarcodeTypeTranslation dbItem, int barcodeTypeTranslationId, int numChildLevels);



		#endregion BarcodeTypeTranslation

		#region BusRoute

		public async Task<IRepositoryActionResult<BusRoute>> InsertAsync(BusRoute item)
		{
			var result = await InsertAsync<BusRoute>(item);
			RunCustomLogicAfterInsert_BusRoute(item, result);

			return result;
		}


		public IQueryable<BusRoute> GetQueryable_BusRoute()
		{
			return _ctx.Set<BusRoute>();
		}

			public async Task<BusRoute> Get_BusRouteAsync(int busRouteId, int numChildLevels)
			{
				var qryItem = GetQueryable_BusRoute().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_BusRoute(ref qryItem, busRouteId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.BusRouteId == busRouteId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_BusRoute(ref dbItem, busRouteId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<BusRoute> GetFirstOrDefaultAsync(BusRoute item)
			{
				return await _ctx.BusRoutes.Where(x => x.BusRouteId == item.BusRouteId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<BusRoute>> UpdateAsync(BusRoute item)
		{
			var oldItem = await _ctx.BusRoutes.FirstOrDefaultAsync(x => x.BusRouteId == item.BusRouteId);
			var result = await UpdateAsync<BusRoute>(item, oldItem);
			RunCustomLogicAfterUpdate_BusRoute(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<BusRoute>> Delete_BusRouteAsync(int busRouteId)
			{
				return await DeleteAsync<BusRoute>(_ctx.BusRoutes.Where(x => x.BusRouteId == busRouteId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<BusRoute>> DeleteAsync(BusRoute item)
			{
				return await DeleteAsync<BusRoute>(_ctx.BusRoutes.Where(x => x.BusRouteId == item.BusRouteId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_BusRoute(BusRoute item, IRepositoryActionResult<BusRoute> result);

		partial void RunCustomLogicAfterUpdate_BusRoute(BusRoute newItem, BusRoute oldItem, IRepositoryActionResult<BusRoute> result);

		partial void RunCustomLogicOnGetQueryableByPK_BusRoute(ref IQueryable<BusRoute> qryItem, int busRouteId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_BusRoute(ref BusRoute dbItem, int busRouteId, int numChildLevels);



		#endregion BusRoute

		#region BusRouteStop

		public async Task<IRepositoryActionResult<BusRouteStop>> InsertAsync(BusRouteStop item)
		{
			var result = await InsertAsync<BusRouteStop>(item);
			RunCustomLogicAfterInsert_BusRouteStop(item, result);

			return result;
		}


		public IQueryable<BusRouteStop> GetQueryable_BusRouteStop()
		{
			return _ctx.Set<BusRouteStop>();
		}

			public async Task<BusRouteStop> Get_BusRouteStopAsync(int busRouteStopId, int numChildLevels)
			{
				var qryItem = GetQueryable_BusRouteStop().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_BusRouteStop(ref qryItem, busRouteStopId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.BusRouteStopId == busRouteStopId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_BusRouteStop(ref dbItem, busRouteStopId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<BusRouteStop> GetFirstOrDefaultAsync(BusRouteStop item)
			{
				return await _ctx.BusRouteStops.Where(x => x.BusRouteStopId == item.BusRouteStopId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<BusRouteStop>> UpdateAsync(BusRouteStop item)
		{
			var oldItem = await _ctx.BusRouteStops.FirstOrDefaultAsync(x => x.BusRouteStopId == item.BusRouteStopId);
			var result = await UpdateAsync<BusRouteStop>(item, oldItem);
			RunCustomLogicAfterUpdate_BusRouteStop(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<BusRouteStop>> Delete_BusRouteStopAsync(int busRouteStopId)
			{
				return await DeleteAsync<BusRouteStop>(_ctx.BusRouteStops.Where(x => x.BusRouteStopId == busRouteStopId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<BusRouteStop>> DeleteAsync(BusRouteStop item)
			{
				return await DeleteAsync<BusRouteStop>(_ctx.BusRouteStops.Where(x => x.BusRouteStopId == item.BusRouteStopId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_BusRouteStop(BusRouteStop item, IRepositoryActionResult<BusRouteStop> result);

		partial void RunCustomLogicAfterUpdate_BusRouteStop(BusRouteStop newItem, BusRouteStop oldItem, IRepositoryActionResult<BusRouteStop> result);

		partial void RunCustomLogicOnGetQueryableByPK_BusRouteStop(ref IQueryable<BusRouteStop> qryItem, int busRouteStopId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_BusRouteStop(ref BusRouteStop dbItem, int busRouteStopId, int numChildLevels);



		#endregion BusRouteStop

		#region BusRouteTranslation

		public async Task<IRepositoryActionResult<BusRouteTranslation>> InsertAsync(BusRouteTranslation item)
		{
			var result = await InsertAsync<BusRouteTranslation>(item);
			RunCustomLogicAfterInsert_BusRouteTranslation(item, result);

			return result;
		}


		public IQueryable<BusRouteTranslation> GetQueryable_BusRouteTranslation()
		{
			return _ctx.Set<BusRouteTranslation>();
		}

			public async Task<BusRouteTranslation> Get_BusRouteTranslationAsync(int busRouteTranslationId, int numChildLevels)
			{
				var qryItem = GetQueryable_BusRouteTranslation().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_BusRouteTranslation(ref qryItem, busRouteTranslationId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.BusRouteTranslationId == busRouteTranslationId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_BusRouteTranslation(ref dbItem, busRouteTranslationId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<BusRouteTranslation> GetFirstOrDefaultAsync(BusRouteTranslation item)
			{
				return await _ctx.BusRouteTranslations.Where(x => x.BusRouteTranslationId == item.BusRouteTranslationId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<BusRouteTranslation>> UpdateAsync(BusRouteTranslation item)
		{
			var oldItem = await _ctx.BusRouteTranslations.FirstOrDefaultAsync(x => x.BusRouteTranslationId == item.BusRouteTranslationId);
			var result = await UpdateAsync<BusRouteTranslation>(item, oldItem);
			RunCustomLogicAfterUpdate_BusRouteTranslation(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<BusRouteTranslation>> Delete_BusRouteTranslationAsync(int busRouteTranslationId)
			{
				return await DeleteAsync<BusRouteTranslation>(_ctx.BusRouteTranslations.Where(x => x.BusRouteTranslationId == busRouteTranslationId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<BusRouteTranslation>> DeleteAsync(BusRouteTranslation item)
			{
				return await DeleteAsync<BusRouteTranslation>(_ctx.BusRouteTranslations.Where(x => x.BusRouteTranslationId == item.BusRouteTranslationId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_BusRouteTranslation(BusRouteTranslation item, IRepositoryActionResult<BusRouteTranslation> result);

		partial void RunCustomLogicAfterUpdate_BusRouteTranslation(BusRouteTranslation newItem, BusRouteTranslation oldItem, IRepositoryActionResult<BusRouteTranslation> result);

		partial void RunCustomLogicOnGetQueryableByPK_BusRouteTranslation(ref IQueryable<BusRouteTranslation> qryItem, int busRouteTranslationId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_BusRouteTranslation(ref BusRouteTranslation dbItem, int busRouteTranslationId, int numChildLevels);



		#endregion BusRouteTranslation

		#region Driver

		public async Task<IRepositoryActionResult<Driver>> InsertAsync(Driver item)
		{
			var result = await InsertAsync<Driver>(item);
			RunCustomLogicAfterInsert_Driver(item, result);

			return result;
		}


		public IQueryable<Driver> GetQueryable_Driver()
		{
			return _ctx.Set<Driver>();
		}

			public async Task<Driver> Get_DriverAsync(int driverId, int numChildLevels)
			{
				var qryItem = GetQueryable_Driver().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_Driver(ref qryItem, driverId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.DriverId == driverId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_Driver(ref dbItem, driverId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<Driver> GetFirstOrDefaultAsync(Driver item)
			{
				return await _ctx.Drivers.Where(x => x.DriverId == item.DriverId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<Driver>> UpdateAsync(Driver item)
		{
			var oldItem = await _ctx.Drivers.FirstOrDefaultAsync(x => x.DriverId == item.DriverId);
			var result = await UpdateAsync<Driver>(item, oldItem);
			RunCustomLogicAfterUpdate_Driver(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<Driver>> Delete_DriverAsync(int driverId)
			{
				return await DeleteAsync<Driver>(_ctx.Drivers.Where(x => x.DriverId == driverId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<Driver>> DeleteAsync(Driver item)
			{
				return await DeleteAsync<Driver>(_ctx.Drivers.Where(x => x.DriverId == item.DriverId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_Driver(Driver item, IRepositoryActionResult<Driver> result);

		partial void RunCustomLogicAfterUpdate_Driver(Driver newItem, Driver oldItem, IRepositoryActionResult<Driver> result);

		partial void RunCustomLogicOnGetQueryableByPK_Driver(ref IQueryable<Driver> qryItem, int driverId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_Driver(ref Driver dbItem, int driverId, int numChildLevels);



		#endregion Driver

		#region DriverShift

		public async Task<IRepositoryActionResult<DriverShift>> InsertAsync(DriverShift item)
		{
			var result = await InsertAsync<DriverShift>(item);
			RunCustomLogicAfterInsert_DriverShift(item, result);

			return result;
		}


		public IQueryable<DriverShift> GetQueryable_DriverShift()
		{
			return _ctx.Set<DriverShift>();
		}

			public async Task<DriverShift> Get_DriverShiftAsync(System.Guid driverShiftId, int numChildLevels)
			{
				var qryItem = GetQueryable_DriverShift().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_DriverShift(ref qryItem, driverShiftId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.DriverShiftId == driverShiftId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_DriverShift(ref dbItem, driverShiftId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<DriverShift> GetFirstOrDefaultAsync(DriverShift item)
			{
				return await _ctx.DriverShifts.Where(x => x.DriverShiftId == item.DriverShiftId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<DriverShift>> UpdateAsync(DriverShift item)
		{
			var oldItem = await _ctx.DriverShifts.FirstOrDefaultAsync(x => x.DriverShiftId == item.DriverShiftId);
			var result = await UpdateAsync<DriverShift>(item, oldItem);
			RunCustomLogicAfterUpdate_DriverShift(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<DriverShift>> Delete_DriverShiftAsync(System.Guid driverShiftId)
			{
				return await DeleteAsync<DriverShift>(_ctx.DriverShifts.Where(x => x.DriverShiftId == driverShiftId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<DriverShift>> DeleteAsync(DriverShift item)
			{
				return await DeleteAsync<DriverShift>(_ctx.DriverShifts.Where(x => x.DriverShiftId == item.DriverShiftId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_DriverShift(DriverShift item, IRepositoryActionResult<DriverShift> result);

		partial void RunCustomLogicAfterUpdate_DriverShift(DriverShift newItem, DriverShift oldItem, IRepositoryActionResult<DriverShift> result);

		partial void RunCustomLogicOnGetQueryableByPK_DriverShift(ref IQueryable<DriverShift> qryItem, System.Guid driverShiftId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_DriverShift(ref DriverShift dbItem, System.Guid driverShiftId, int numChildLevels);



		#endregion DriverShift

		#region Feedback

		public async Task<IRepositoryActionResult<Feedback>> InsertAsync(Feedback item)
		{
			var result = await InsertAsync<Feedback>(item);
			RunCustomLogicAfterInsert_Feedback(item, result);

			return result;
		}


		public IQueryable<Feedback> GetQueryable_Feedback()
		{
			return _ctx.Set<Feedback>();
		}

			public async Task<Feedback> Get_FeedbackAsync(System.Guid feedbackId, int numChildLevels)
			{
				var qryItem = GetQueryable_Feedback().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_Feedback(ref qryItem, feedbackId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.FeedbackId == feedbackId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_Feedback(ref dbItem, feedbackId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<Feedback> GetFirstOrDefaultAsync(Feedback item)
			{
				return await _ctx.Feedbacks.Where(x => x.FeedbackId == item.FeedbackId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<Feedback>> UpdateAsync(Feedback item)
		{
			var oldItem = await _ctx.Feedbacks.FirstOrDefaultAsync(x => x.FeedbackId == item.FeedbackId);
			var result = await UpdateAsync<Feedback>(item, oldItem);
			RunCustomLogicAfterUpdate_Feedback(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<Feedback>> Delete_FeedbackAsync(System.Guid feedbackId)
			{
				return await DeleteAsync<Feedback>(_ctx.Feedbacks.Where(x => x.FeedbackId == feedbackId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<Feedback>> DeleteAsync(Feedback item)
			{
				return await DeleteAsync<Feedback>(_ctx.Feedbacks.Where(x => x.FeedbackId == item.FeedbackId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_Feedback(Feedback item, IRepositoryActionResult<Feedback> result);

		partial void RunCustomLogicAfterUpdate_Feedback(Feedback newItem, Feedback oldItem, IRepositoryActionResult<Feedback> result);

		partial void RunCustomLogicOnGetQueryableByPK_Feedback(ref IQueryable<Feedback> qryItem, System.Guid feedbackId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_Feedback(ref Feedback dbItem, System.Guid feedbackId, int numChildLevels);



		#endregion Feedback

		#region FeedbackInitiatorType

		public async Task<IRepositoryActionResult<FeedbackInitiatorType>> InsertAsync(FeedbackInitiatorType item)
		{
			var result = await InsertAsync<FeedbackInitiatorType>(item);
			RunCustomLogicAfterInsert_FeedbackInitiatorType(item, result);

			return result;
		}


		public IQueryable<FeedbackInitiatorType> GetQueryable_FeedbackInitiatorType()
		{
			return _ctx.Set<FeedbackInitiatorType>();
		}

			public async Task<FeedbackInitiatorType> Get_FeedbackInitiatorTypeAsync(int feedbackInitiatorTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_FeedbackInitiatorType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_FeedbackInitiatorType(ref qryItem, feedbackInitiatorTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.FeedbackInitiatorTypeId == feedbackInitiatorTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_FeedbackInitiatorType(ref dbItem, feedbackInitiatorTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<FeedbackInitiatorType> GetFirstOrDefaultAsync(FeedbackInitiatorType item)
			{
				return await _ctx.FeedbackInitiatorTypes.Where(x => x.FeedbackInitiatorTypeId == item.FeedbackInitiatorTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<FeedbackInitiatorType>> UpdateAsync(FeedbackInitiatorType item)
		{
			var oldItem = await _ctx.FeedbackInitiatorTypes.FirstOrDefaultAsync(x => x.FeedbackInitiatorTypeId == item.FeedbackInitiatorTypeId);
			var result = await UpdateAsync<FeedbackInitiatorType>(item, oldItem);
			RunCustomLogicAfterUpdate_FeedbackInitiatorType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<FeedbackInitiatorType>> Delete_FeedbackInitiatorTypeAsync(int feedbackInitiatorTypeId)
			{
				return await DeleteAsync<FeedbackInitiatorType>(_ctx.FeedbackInitiatorTypes.Where(x => x.FeedbackInitiatorTypeId == feedbackInitiatorTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<FeedbackInitiatorType>> DeleteAsync(FeedbackInitiatorType item)
			{
				return await DeleteAsync<FeedbackInitiatorType>(_ctx.FeedbackInitiatorTypes.Where(x => x.FeedbackInitiatorTypeId == item.FeedbackInitiatorTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_FeedbackInitiatorType(FeedbackInitiatorType item, IRepositoryActionResult<FeedbackInitiatorType> result);

		partial void RunCustomLogicAfterUpdate_FeedbackInitiatorType(FeedbackInitiatorType newItem, FeedbackInitiatorType oldItem, IRepositoryActionResult<FeedbackInitiatorType> result);

		partial void RunCustomLogicOnGetQueryableByPK_FeedbackInitiatorType(ref IQueryable<FeedbackInitiatorType> qryItem, int feedbackInitiatorTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_FeedbackInitiatorType(ref FeedbackInitiatorType dbItem, int feedbackInitiatorTypeId, int numChildLevels);



		#endregion FeedbackInitiatorType

		#region FeedbackInitiatorTypeTranslation

		public async Task<IRepositoryActionResult<FeedbackInitiatorTypeTranslation>> InsertAsync(FeedbackInitiatorTypeTranslation item)
		{
			var result = await InsertAsync<FeedbackInitiatorTypeTranslation>(item);
			RunCustomLogicAfterInsert_FeedbackInitiatorTypeTranslation(item, result);

			return result;
		}


		public IQueryable<FeedbackInitiatorTypeTranslation> GetQueryable_FeedbackInitiatorTypeTranslation()
		{
			return _ctx.Set<FeedbackInitiatorTypeTranslation>();
		}

			public async Task<FeedbackInitiatorTypeTranslation> Get_FeedbackInitiatorTypeTranslationAsync(int feedbackInitiatorTypeTranslationId, int numChildLevels)
			{
				var qryItem = GetQueryable_FeedbackInitiatorTypeTranslation().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_FeedbackInitiatorTypeTranslation(ref qryItem, feedbackInitiatorTypeTranslationId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.FeedbackInitiatorTypeTranslationId == feedbackInitiatorTypeTranslationId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_FeedbackInitiatorTypeTranslation(ref dbItem, feedbackInitiatorTypeTranslationId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<FeedbackInitiatorTypeTranslation> GetFirstOrDefaultAsync(FeedbackInitiatorTypeTranslation item)
			{
				return await _ctx.FeedbackInitiatorTypeTranslations.Where(x => x.FeedbackInitiatorTypeTranslationId == item.FeedbackInitiatorTypeTranslationId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<FeedbackInitiatorTypeTranslation>> UpdateAsync(FeedbackInitiatorTypeTranslation item)
		{
			var oldItem = await _ctx.FeedbackInitiatorTypeTranslations.FirstOrDefaultAsync(x => x.FeedbackInitiatorTypeTranslationId == item.FeedbackInitiatorTypeTranslationId);
			var result = await UpdateAsync<FeedbackInitiatorTypeTranslation>(item, oldItem);
			RunCustomLogicAfterUpdate_FeedbackInitiatorTypeTranslation(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<FeedbackInitiatorTypeTranslation>> Delete_FeedbackInitiatorTypeTranslationAsync(int feedbackInitiatorTypeTranslationId)
			{
				return await DeleteAsync<FeedbackInitiatorTypeTranslation>(_ctx.FeedbackInitiatorTypeTranslations.Where(x => x.FeedbackInitiatorTypeTranslationId == feedbackInitiatorTypeTranslationId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<FeedbackInitiatorTypeTranslation>> DeleteAsync(FeedbackInitiatorTypeTranslation item)
			{
				return await DeleteAsync<FeedbackInitiatorTypeTranslation>(_ctx.FeedbackInitiatorTypeTranslations.Where(x => x.FeedbackInitiatorTypeTranslationId == item.FeedbackInitiatorTypeTranslationId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_FeedbackInitiatorTypeTranslation(FeedbackInitiatorTypeTranslation item, IRepositoryActionResult<FeedbackInitiatorTypeTranslation> result);

		partial void RunCustomLogicAfterUpdate_FeedbackInitiatorTypeTranslation(FeedbackInitiatorTypeTranslation newItem, FeedbackInitiatorTypeTranslation oldItem, IRepositoryActionResult<FeedbackInitiatorTypeTranslation> result);

		partial void RunCustomLogicOnGetQueryableByPK_FeedbackInitiatorTypeTranslation(ref IQueryable<FeedbackInitiatorTypeTranslation> qryItem, int feedbackInitiatorTypeTranslationId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_FeedbackInitiatorTypeTranslation(ref FeedbackInitiatorTypeTranslation dbItem, int feedbackInitiatorTypeTranslationId, int numChildLevels);



		#endregion FeedbackInitiatorTypeTranslation

		#region FeedbackType

		public async Task<IRepositoryActionResult<FeedbackType>> InsertAsync(FeedbackType item)
		{
			var result = await InsertAsync<FeedbackType>(item);
			RunCustomLogicAfterInsert_FeedbackType(item, result);

			return result;
		}


		public IQueryable<FeedbackType> GetQueryable_FeedbackType()
		{
			return _ctx.Set<FeedbackType>();
		}

			public async Task<FeedbackType> Get_FeedbackTypeAsync(int feedbackTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_FeedbackType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_FeedbackType(ref qryItem, feedbackTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.FeedbackTypeId == feedbackTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_FeedbackType(ref dbItem, feedbackTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<FeedbackType> GetFirstOrDefaultAsync(FeedbackType item)
			{
				return await _ctx.FeedbackTypes.Where(x => x.FeedbackTypeId == item.FeedbackTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<FeedbackType>> UpdateAsync(FeedbackType item)
		{
			var oldItem = await _ctx.FeedbackTypes.FirstOrDefaultAsync(x => x.FeedbackTypeId == item.FeedbackTypeId);
			var result = await UpdateAsync<FeedbackType>(item, oldItem);
			RunCustomLogicAfterUpdate_FeedbackType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<FeedbackType>> Delete_FeedbackTypeAsync(int feedbackTypeId)
			{
				return await DeleteAsync<FeedbackType>(_ctx.FeedbackTypes.Where(x => x.FeedbackTypeId == feedbackTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<FeedbackType>> DeleteAsync(FeedbackType item)
			{
				return await DeleteAsync<FeedbackType>(_ctx.FeedbackTypes.Where(x => x.FeedbackTypeId == item.FeedbackTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_FeedbackType(FeedbackType item, IRepositoryActionResult<FeedbackType> result);

		partial void RunCustomLogicAfterUpdate_FeedbackType(FeedbackType newItem, FeedbackType oldItem, IRepositoryActionResult<FeedbackType> result);

		partial void RunCustomLogicOnGetQueryableByPK_FeedbackType(ref IQueryable<FeedbackType> qryItem, int feedbackTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_FeedbackType(ref FeedbackType dbItem, int feedbackTypeId, int numChildLevels);



		#endregion FeedbackType

		#region FeedbackTypeTranslation

		public async Task<IRepositoryActionResult<FeedbackTypeTranslation>> InsertAsync(FeedbackTypeTranslation item)
		{
			var result = await InsertAsync<FeedbackTypeTranslation>(item);
			RunCustomLogicAfterInsert_FeedbackTypeTranslation(item, result);

			return result;
		}


		public IQueryable<FeedbackTypeTranslation> GetQueryable_FeedbackTypeTranslation()
		{
			return _ctx.Set<FeedbackTypeTranslation>();
		}

			public async Task<FeedbackTypeTranslation> Get_FeedbackTypeTranslationAsync(int feedbackTypeTranslationId, int numChildLevels)
			{
				var qryItem = GetQueryable_FeedbackTypeTranslation().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_FeedbackTypeTranslation(ref qryItem, feedbackTypeTranslationId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.FeedbackTypeTranslationId == feedbackTypeTranslationId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_FeedbackTypeTranslation(ref dbItem, feedbackTypeTranslationId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<FeedbackTypeTranslation> GetFirstOrDefaultAsync(FeedbackTypeTranslation item)
			{
				return await _ctx.FeedbackTypeTranslations.Where(x => x.FeedbackTypeTranslationId == item.FeedbackTypeTranslationId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<FeedbackTypeTranslation>> UpdateAsync(FeedbackTypeTranslation item)
		{
			var oldItem = await _ctx.FeedbackTypeTranslations.FirstOrDefaultAsync(x => x.FeedbackTypeTranslationId == item.FeedbackTypeTranslationId);
			var result = await UpdateAsync<FeedbackTypeTranslation>(item, oldItem);
			RunCustomLogicAfterUpdate_FeedbackTypeTranslation(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<FeedbackTypeTranslation>> Delete_FeedbackTypeTranslationAsync(int feedbackTypeTranslationId)
			{
				return await DeleteAsync<FeedbackTypeTranslation>(_ctx.FeedbackTypeTranslations.Where(x => x.FeedbackTypeTranslationId == feedbackTypeTranslationId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<FeedbackTypeTranslation>> DeleteAsync(FeedbackTypeTranslation item)
			{
				return await DeleteAsync<FeedbackTypeTranslation>(_ctx.FeedbackTypeTranslations.Where(x => x.FeedbackTypeTranslationId == item.FeedbackTypeTranslationId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_FeedbackTypeTranslation(FeedbackTypeTranslation item, IRepositoryActionResult<FeedbackTypeTranslation> result);

		partial void RunCustomLogicAfterUpdate_FeedbackTypeTranslation(FeedbackTypeTranslation newItem, FeedbackTypeTranslation oldItem, IRepositoryActionResult<FeedbackTypeTranslation> result);

		partial void RunCustomLogicOnGetQueryableByPK_FeedbackTypeTranslation(ref IQueryable<FeedbackTypeTranslation> qryItem, int feedbackTypeTranslationId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_FeedbackTypeTranslation(ref FeedbackTypeTranslation dbItem, int feedbackTypeTranslationId, int numChildLevels);



		#endregion FeedbackTypeTranslation

		#region GenderType

		public async Task<IRepositoryActionResult<GenderType>> InsertAsync(GenderType item)
		{
			var result = await InsertAsync<GenderType>(item);
			RunCustomLogicAfterInsert_GenderType(item, result);

			return result;
		}


		public IQueryable<GenderType> GetQueryable_GenderType()
		{
			return _ctx.Set<GenderType>();
		}

			public async Task<GenderType> Get_GenderTypeAsync(int genderTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_GenderType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_GenderType(ref qryItem, genderTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.GenderTypeId == genderTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_GenderType(ref dbItem, genderTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<GenderType> GetFirstOrDefaultAsync(GenderType item)
			{
				return await _ctx.GenderTypes.Where(x => x.GenderTypeId == item.GenderTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<GenderType>> UpdateAsync(GenderType item)
		{
			var oldItem = await _ctx.GenderTypes.FirstOrDefaultAsync(x => x.GenderTypeId == item.GenderTypeId);
			var result = await UpdateAsync<GenderType>(item, oldItem);
			RunCustomLogicAfterUpdate_GenderType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<GenderType>> Delete_GenderTypeAsync(int genderTypeId)
			{
				return await DeleteAsync<GenderType>(_ctx.GenderTypes.Where(x => x.GenderTypeId == genderTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<GenderType>> DeleteAsync(GenderType item)
			{
				return await DeleteAsync<GenderType>(_ctx.GenderTypes.Where(x => x.GenderTypeId == item.GenderTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_GenderType(GenderType item, IRepositoryActionResult<GenderType> result);

		partial void RunCustomLogicAfterUpdate_GenderType(GenderType newItem, GenderType oldItem, IRepositoryActionResult<GenderType> result);

		partial void RunCustomLogicOnGetQueryableByPK_GenderType(ref IQueryable<GenderType> qryItem, int genderTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_GenderType(ref GenderType dbItem, int genderTypeId, int numChildLevels);



		#endregion GenderType

		#region GenderTypeTranslation

		public async Task<IRepositoryActionResult<GenderTypeTranslation>> InsertAsync(GenderTypeTranslation item)
		{
			var result = await InsertAsync<GenderTypeTranslation>(item);
			RunCustomLogicAfterInsert_GenderTypeTranslation(item, result);

			return result;
		}


		public IQueryable<GenderTypeTranslation> GetQueryable_GenderTypeTranslation()
		{
			return _ctx.Set<GenderTypeTranslation>();
		}

			public async Task<GenderTypeTranslation> Get_GenderTypeTranslationAsync(int genderTypeTranslationId, int numChildLevels)
			{
				var qryItem = GetQueryable_GenderTypeTranslation().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_GenderTypeTranslation(ref qryItem, genderTypeTranslationId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.GenderTypeTranslationId == genderTypeTranslationId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_GenderTypeTranslation(ref dbItem, genderTypeTranslationId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<GenderTypeTranslation> GetFirstOrDefaultAsync(GenderTypeTranslation item)
			{
				return await _ctx.GenderTypeTranslations.Where(x => x.GenderTypeTranslationId == item.GenderTypeTranslationId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<GenderTypeTranslation>> UpdateAsync(GenderTypeTranslation item)
		{
			var oldItem = await _ctx.GenderTypeTranslations.FirstOrDefaultAsync(x => x.GenderTypeTranslationId == item.GenderTypeTranslationId);
			var result = await UpdateAsync<GenderTypeTranslation>(item, oldItem);
			RunCustomLogicAfterUpdate_GenderTypeTranslation(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<GenderTypeTranslation>> Delete_GenderTypeTranslationAsync(int genderTypeTranslationId)
			{
				return await DeleteAsync<GenderTypeTranslation>(_ctx.GenderTypeTranslations.Where(x => x.GenderTypeTranslationId == genderTypeTranslationId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<GenderTypeTranslation>> DeleteAsync(GenderTypeTranslation item)
			{
				return await DeleteAsync<GenderTypeTranslation>(_ctx.GenderTypeTranslations.Where(x => x.GenderTypeTranslationId == item.GenderTypeTranslationId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_GenderTypeTranslation(GenderTypeTranslation item, IRepositoryActionResult<GenderTypeTranslation> result);

		partial void RunCustomLogicAfterUpdate_GenderTypeTranslation(GenderTypeTranslation newItem, GenderTypeTranslation oldItem, IRepositoryActionResult<GenderTypeTranslation> result);

		partial void RunCustomLogicOnGetQueryableByPK_GenderTypeTranslation(ref IQueryable<GenderTypeTranslation> qryItem, int genderTypeTranslationId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_GenderTypeTranslation(ref GenderTypeTranslation dbItem, int genderTypeTranslationId, int numChildLevels);



		#endregion GenderTypeTranslation

		#region Holiday

		public async Task<IRepositoryActionResult<Holiday>> InsertAsync(Holiday item)
		{
			var result = await InsertAsync<Holiday>(item);
			RunCustomLogicAfterInsert_Holiday(item, result);

			return result;
		}


		public IQueryable<Holiday> GetQueryable_Holiday()
		{
			return _ctx.Set<Holiday>();
		}

			public async Task<Holiday> Get_HolidayAsync(int holidayId, int numChildLevels)
			{
				var qryItem = GetQueryable_Holiday().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_Holiday(ref qryItem, holidayId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.HolidayId == holidayId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_Holiday(ref dbItem, holidayId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<Holiday> GetFirstOrDefaultAsync(Holiday item)
			{
				return await _ctx.Holidays.Where(x => x.HolidayId == item.HolidayId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<Holiday>> UpdateAsync(Holiday item)
		{
			var oldItem = await _ctx.Holidays.FirstOrDefaultAsync(x => x.HolidayId == item.HolidayId);
			var result = await UpdateAsync<Holiday>(item, oldItem);
			RunCustomLogicAfterUpdate_Holiday(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<Holiday>> Delete_HolidayAsync(int holidayId)
			{
				return await DeleteAsync<Holiday>(_ctx.Holidays.Where(x => x.HolidayId == holidayId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<Holiday>> DeleteAsync(Holiday item)
			{
				return await DeleteAsync<Holiday>(_ctx.Holidays.Where(x => x.HolidayId == item.HolidayId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_Holiday(Holiday item, IRepositoryActionResult<Holiday> result);

		partial void RunCustomLogicAfterUpdate_Holiday(Holiday newItem, Holiday oldItem, IRepositoryActionResult<Holiday> result);

		partial void RunCustomLogicOnGetQueryableByPK_Holiday(ref IQueryable<Holiday> qryItem, int holidayId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_Holiday(ref Holiday dbItem, int holidayId, int numChildLevels);



		#endregion Holiday

		#region HolidayTranslation

		public async Task<IRepositoryActionResult<HolidayTranslation>> InsertAsync(HolidayTranslation item)
		{
			var result = await InsertAsync<HolidayTranslation>(item);
			RunCustomLogicAfterInsert_HolidayTranslation(item, result);

			return result;
		}


		public IQueryable<HolidayTranslation> GetQueryable_HolidayTranslation()
		{
			return _ctx.Set<HolidayTranslation>();
		}

			public async Task<HolidayTranslation> Get_HolidayTranslationAsync(int holidayTranslationId, int numChildLevels)
			{
				var qryItem = GetQueryable_HolidayTranslation().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_HolidayTranslation(ref qryItem, holidayTranslationId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.HolidayTranslationId == holidayTranslationId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_HolidayTranslation(ref dbItem, holidayTranslationId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<HolidayTranslation> GetFirstOrDefaultAsync(HolidayTranslation item)
			{
				return await _ctx.HolidayTranslations.Where(x => x.HolidayTranslationId == item.HolidayTranslationId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<HolidayTranslation>> UpdateAsync(HolidayTranslation item)
		{
			var oldItem = await _ctx.HolidayTranslations.FirstOrDefaultAsync(x => x.HolidayTranslationId == item.HolidayTranslationId);
			var result = await UpdateAsync<HolidayTranslation>(item, oldItem);
			RunCustomLogicAfterUpdate_HolidayTranslation(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<HolidayTranslation>> Delete_HolidayTranslationAsync(int holidayTranslationId)
			{
				return await DeleteAsync<HolidayTranslation>(_ctx.HolidayTranslations.Where(x => x.HolidayTranslationId == holidayTranslationId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<HolidayTranslation>> DeleteAsync(HolidayTranslation item)
			{
				return await DeleteAsync<HolidayTranslation>(_ctx.HolidayTranslations.Where(x => x.HolidayTranslationId == item.HolidayTranslationId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_HolidayTranslation(HolidayTranslation item, IRepositoryActionResult<HolidayTranslation> result);

		partial void RunCustomLogicAfterUpdate_HolidayTranslation(HolidayTranslation newItem, HolidayTranslation oldItem, IRepositoryActionResult<HolidayTranslation> result);

		partial void RunCustomLogicOnGetQueryableByPK_HolidayTranslation(ref IQueryable<HolidayTranslation> qryItem, int holidayTranslationId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_HolidayTranslation(ref HolidayTranslation dbItem, int holidayTranslationId, int numChildLevels);



		#endregion HolidayTranslation

		#region LanguageType

		public async Task<IRepositoryActionResult<LanguageType>> InsertAsync(LanguageType item)
		{
			var result = await InsertAsync<LanguageType>(item);
			RunCustomLogicAfterInsert_LanguageType(item, result);

			return result;
		}


		public IQueryable<LanguageType> GetQueryable_LanguageType()
		{
			return _ctx.Set<LanguageType>();
		}

			public async Task<LanguageType> Get_LanguageTypeAsync(int languageTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_LanguageType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_LanguageType(ref qryItem, languageTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.LanguageTypeId == languageTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_LanguageType(ref dbItem, languageTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<LanguageType> GetFirstOrDefaultAsync(LanguageType item)
			{
				return await _ctx.LanguageTypes.Where(x => x.LanguageTypeId == item.LanguageTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<LanguageType>> UpdateAsync(LanguageType item)
		{
			var oldItem = await _ctx.LanguageTypes.FirstOrDefaultAsync(x => x.LanguageTypeId == item.LanguageTypeId);
			var result = await UpdateAsync<LanguageType>(item, oldItem);
			RunCustomLogicAfterUpdate_LanguageType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<LanguageType>> Delete_LanguageTypeAsync(int languageTypeId)
			{
				return await DeleteAsync<LanguageType>(_ctx.LanguageTypes.Where(x => x.LanguageTypeId == languageTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<LanguageType>> DeleteAsync(LanguageType item)
			{
				return await DeleteAsync<LanguageType>(_ctx.LanguageTypes.Where(x => x.LanguageTypeId == item.LanguageTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_LanguageType(LanguageType item, IRepositoryActionResult<LanguageType> result);

		partial void RunCustomLogicAfterUpdate_LanguageType(LanguageType newItem, LanguageType oldItem, IRepositoryActionResult<LanguageType> result);

		partial void RunCustomLogicOnGetQueryableByPK_LanguageType(ref IQueryable<LanguageType> qryItem, int languageTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_LanguageType(ref LanguageType dbItem, int languageTypeId, int numChildLevels);



		#endregion LanguageType

		#region Location

		public async Task<IRepositoryActionResult<Location>> InsertAsync(Location item)
		{
			var result = await InsertAsync<Location>(item);
			RunCustomLogicAfterInsert_Location(item, result);

			return result;
		}


		public IQueryable<Location> GetQueryable_Location()
		{
			return _ctx.Set<Location>();
		}

			public async Task<Location> Get_LocationAsync(System.Guid locationId, int numChildLevels)
			{
				var qryItem = GetQueryable_Location().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_Location(ref qryItem, locationId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.LocationId == locationId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_Location(ref dbItem, locationId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<Location> GetFirstOrDefaultAsync(Location item)
			{
				return await _ctx.Locations.Where(x => x.LocationId == item.LocationId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<Location>> UpdateAsync(Location item)
		{
			var oldItem = await _ctx.Locations.FirstOrDefaultAsync(x => x.LocationId == item.LocationId);
			var result = await UpdateAsync<Location>(item, oldItem);
			RunCustomLogicAfterUpdate_Location(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<Location>> Delete_LocationAsync(System.Guid locationId)
			{
				return await DeleteAsync<Location>(_ctx.Locations.Where(x => x.LocationId == locationId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<Location>> DeleteAsync(Location item)
			{
				return await DeleteAsync<Location>(_ctx.Locations.Where(x => x.LocationId == item.LocationId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_Location(Location item, IRepositoryActionResult<Location> result);

		partial void RunCustomLogicAfterUpdate_Location(Location newItem, Location oldItem, IRepositoryActionResult<Location> result);

		partial void RunCustomLogicOnGetQueryableByPK_Location(ref IQueryable<Location> qryItem, System.Guid locationId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_Location(ref Location dbItem, System.Guid locationId, int numChildLevels);



		#endregion Location

		#region LocationType

		public async Task<IRepositoryActionResult<LocationType>> InsertAsync(LocationType item)
		{
			var result = await InsertAsync<LocationType>(item);
			RunCustomLogicAfterInsert_LocationType(item, result);

			return result;
		}


		public IQueryable<LocationType> GetQueryable_LocationType()
		{
			return _ctx.Set<LocationType>();
		}

			public async Task<LocationType> Get_LocationTypeAsync(int locationTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_LocationType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_LocationType(ref qryItem, locationTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.LocationTypeId == locationTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_LocationType(ref dbItem, locationTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<LocationType> GetFirstOrDefaultAsync(LocationType item)
			{
				return await _ctx.LocationTypes.Where(x => x.LocationTypeId == item.LocationTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<LocationType>> UpdateAsync(LocationType item)
		{
			var oldItem = await _ctx.LocationTypes.FirstOrDefaultAsync(x => x.LocationTypeId == item.LocationTypeId);
			var result = await UpdateAsync<LocationType>(item, oldItem);
			RunCustomLogicAfterUpdate_LocationType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<LocationType>> Delete_LocationTypeAsync(int locationTypeId)
			{
				return await DeleteAsync<LocationType>(_ctx.LocationTypes.Where(x => x.LocationTypeId == locationTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<LocationType>> DeleteAsync(LocationType item)
			{
				return await DeleteAsync<LocationType>(_ctx.LocationTypes.Where(x => x.LocationTypeId == item.LocationTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_LocationType(LocationType item, IRepositoryActionResult<LocationType> result);

		partial void RunCustomLogicAfterUpdate_LocationType(LocationType newItem, LocationType oldItem, IRepositoryActionResult<LocationType> result);

		partial void RunCustomLogicOnGetQueryableByPK_LocationType(ref IQueryable<LocationType> qryItem, int locationTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_LocationType(ref LocationType dbItem, int locationTypeId, int numChildLevels);



		#endregion LocationType

		#region LocationTypeTranslation

		public async Task<IRepositoryActionResult<LocationTypeTranslation>> InsertAsync(LocationTypeTranslation item)
		{
			var result = await InsertAsync<LocationTypeTranslation>(item);
			RunCustomLogicAfterInsert_LocationTypeTranslation(item, result);

			return result;
		}


		public IQueryable<LocationTypeTranslation> GetQueryable_LocationTypeTranslation()
		{
			return _ctx.Set<LocationTypeTranslation>();
		}

			public async Task<LocationTypeTranslation> Get_LocationTypeTranslationAsync(int locationTypeTranslationId, int numChildLevels)
			{
				var qryItem = GetQueryable_LocationTypeTranslation().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_LocationTypeTranslation(ref qryItem, locationTypeTranslationId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.LocationTypeTranslationId == locationTypeTranslationId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_LocationTypeTranslation(ref dbItem, locationTypeTranslationId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<LocationTypeTranslation> GetFirstOrDefaultAsync(LocationTypeTranslation item)
			{
				return await _ctx.LocationTypeTranslations.Where(x => x.LocationTypeTranslationId == item.LocationTypeTranslationId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<LocationTypeTranslation>> UpdateAsync(LocationTypeTranslation item)
		{
			var oldItem = await _ctx.LocationTypeTranslations.FirstOrDefaultAsync(x => x.LocationTypeTranslationId == item.LocationTypeTranslationId);
			var result = await UpdateAsync<LocationTypeTranslation>(item, oldItem);
			RunCustomLogicAfterUpdate_LocationTypeTranslation(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<LocationTypeTranslation>> Delete_LocationTypeTranslationAsync(int locationTypeTranslationId)
			{
				return await DeleteAsync<LocationTypeTranslation>(_ctx.LocationTypeTranslations.Where(x => x.LocationTypeTranslationId == locationTypeTranslationId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<LocationTypeTranslation>> DeleteAsync(LocationTypeTranslation item)
			{
				return await DeleteAsync<LocationTypeTranslation>(_ctx.LocationTypeTranslations.Where(x => x.LocationTypeTranslationId == item.LocationTypeTranslationId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_LocationTypeTranslation(LocationTypeTranslation item, IRepositoryActionResult<LocationTypeTranslation> result);

		partial void RunCustomLogicAfterUpdate_LocationTypeTranslation(LocationTypeTranslation newItem, LocationTypeTranslation oldItem, IRepositoryActionResult<LocationTypeTranslation> result);

		partial void RunCustomLogicOnGetQueryableByPK_LocationTypeTranslation(ref IQueryable<LocationTypeTranslation> qryItem, int locationTypeTranslationId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_LocationTypeTranslation(ref LocationTypeTranslation dbItem, int locationTypeTranslationId, int numChildLevels);



		#endregion LocationTypeTranslation

		#region NotificationType

		public async Task<IRepositoryActionResult<NotificationType>> InsertAsync(NotificationType item)
		{
			var result = await InsertAsync<NotificationType>(item);
			RunCustomLogicAfterInsert_NotificationType(item, result);

			return result;
		}


		public IQueryable<NotificationType> GetQueryable_NotificationType()
		{
			return _ctx.Set<NotificationType>();
		}

			public async Task<NotificationType> Get_NotificationTypeAsync(int notificationTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_NotificationType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_NotificationType(ref qryItem, notificationTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.NotificationTypeId == notificationTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_NotificationType(ref dbItem, notificationTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<NotificationType> GetFirstOrDefaultAsync(NotificationType item)
			{
				return await _ctx.NotificationTypes.Where(x => x.NotificationTypeId == item.NotificationTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<NotificationType>> UpdateAsync(NotificationType item)
		{
			var oldItem = await _ctx.NotificationTypes.FirstOrDefaultAsync(x => x.NotificationTypeId == item.NotificationTypeId);
			var result = await UpdateAsync<NotificationType>(item, oldItem);
			RunCustomLogicAfterUpdate_NotificationType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<NotificationType>> Delete_NotificationTypeAsync(int notificationTypeId)
			{
				return await DeleteAsync<NotificationType>(_ctx.NotificationTypes.Where(x => x.NotificationTypeId == notificationTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<NotificationType>> DeleteAsync(NotificationType item)
			{
				return await DeleteAsync<NotificationType>(_ctx.NotificationTypes.Where(x => x.NotificationTypeId == item.NotificationTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_NotificationType(NotificationType item, IRepositoryActionResult<NotificationType> result);

		partial void RunCustomLogicAfterUpdate_NotificationType(NotificationType newItem, NotificationType oldItem, IRepositoryActionResult<NotificationType> result);

		partial void RunCustomLogicOnGetQueryableByPK_NotificationType(ref IQueryable<NotificationType> qryItem, int notificationTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_NotificationType(ref NotificationType dbItem, int notificationTypeId, int numChildLevels);



		#endregion NotificationType

		#region NotificationTypeTranslation

		public async Task<IRepositoryActionResult<NotificationTypeTranslation>> InsertAsync(NotificationTypeTranslation item)
		{
			var result = await InsertAsync<NotificationTypeTranslation>(item);
			RunCustomLogicAfterInsert_NotificationTypeTranslation(item, result);

			return result;
		}


		public IQueryable<NotificationTypeTranslation> GetQueryable_NotificationTypeTranslation()
		{
			return _ctx.Set<NotificationTypeTranslation>();
		}

			public async Task<NotificationTypeTranslation> Get_NotificationTypeTranslationAsync(int notificationTypeTranslationId, int numChildLevels)
			{
				var qryItem = GetQueryable_NotificationTypeTranslation().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_NotificationTypeTranslation(ref qryItem, notificationTypeTranslationId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.NotificationTypeTranslationId == notificationTypeTranslationId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_NotificationTypeTranslation(ref dbItem, notificationTypeTranslationId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<NotificationTypeTranslation> GetFirstOrDefaultAsync(NotificationTypeTranslation item)
			{
				return await _ctx.NotificationTypeTranslations.Where(x => x.NotificationTypeTranslationId == item.NotificationTypeTranslationId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<NotificationTypeTranslation>> UpdateAsync(NotificationTypeTranslation item)
		{
			var oldItem = await _ctx.NotificationTypeTranslations.FirstOrDefaultAsync(x => x.NotificationTypeTranslationId == item.NotificationTypeTranslationId);
			var result = await UpdateAsync<NotificationTypeTranslation>(item, oldItem);
			RunCustomLogicAfterUpdate_NotificationTypeTranslation(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<NotificationTypeTranslation>> Delete_NotificationTypeTranslationAsync(int notificationTypeTranslationId)
			{
				return await DeleteAsync<NotificationTypeTranslation>(_ctx.NotificationTypeTranslations.Where(x => x.NotificationTypeTranslationId == notificationTypeTranslationId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<NotificationTypeTranslation>> DeleteAsync(NotificationTypeTranslation item)
			{
				return await DeleteAsync<NotificationTypeTranslation>(_ctx.NotificationTypeTranslations.Where(x => x.NotificationTypeTranslationId == item.NotificationTypeTranslationId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_NotificationTypeTranslation(NotificationTypeTranslation item, IRepositoryActionResult<NotificationTypeTranslation> result);

		partial void RunCustomLogicAfterUpdate_NotificationTypeTranslation(NotificationTypeTranslation newItem, NotificationTypeTranslation oldItem, IRepositoryActionResult<NotificationTypeTranslation> result);

		partial void RunCustomLogicOnGetQueryableByPK_NotificationTypeTranslation(ref IQueryable<NotificationTypeTranslation> qryItem, int notificationTypeTranslationId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_NotificationTypeTranslation(ref NotificationTypeTranslation dbItem, int notificationTypeTranslationId, int numChildLevels);



		#endregion NotificationTypeTranslation

		#region Reservation

		public async Task<IRepositoryActionResult<Reservation>> InsertAsync(Reservation item)
		{
			var result = await InsertAsync<Reservation>(item);
			RunCustomLogicAfterInsert_Reservation(item, result);

			return result;
		}


		public IQueryable<Reservation> GetQueryable_Reservation()
		{
			return _ctx.Set<Reservation>();
		}

			public async Task<Reservation> Get_ReservationAsync(System.Guid reservationId, int numChildLevels)
			{
				var qryItem = GetQueryable_Reservation().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_Reservation(ref qryItem, reservationId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.ReservationId == reservationId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_Reservation(ref dbItem, reservationId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<Reservation> GetFirstOrDefaultAsync(Reservation item)
			{
				return await _ctx.Reservations.Where(x => x.ReservationId == item.ReservationId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<Reservation>> UpdateAsync(Reservation item)
		{
			var oldItem = await _ctx.Reservations.FirstOrDefaultAsync(x => x.ReservationId == item.ReservationId);
			var result = await UpdateAsync<Reservation>(item, oldItem);
			RunCustomLogicAfterUpdate_Reservation(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<Reservation>> Delete_ReservationAsync(System.Guid reservationId)
			{
				return await DeleteAsync<Reservation>(_ctx.Reservations.Where(x => x.ReservationId == reservationId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<Reservation>> DeleteAsync(Reservation item)
			{
				return await DeleteAsync<Reservation>(_ctx.Reservations.Where(x => x.ReservationId == item.ReservationId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_Reservation(Reservation item, IRepositoryActionResult<Reservation> result);

		partial void RunCustomLogicAfterUpdate_Reservation(Reservation newItem, Reservation oldItem, IRepositoryActionResult<Reservation> result);

		partial void RunCustomLogicOnGetQueryableByPK_Reservation(ref IQueryable<Reservation> qryItem, System.Guid reservationId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_Reservation(ref Reservation dbItem, System.Guid reservationId, int numChildLevels);



		#endregion Reservation

		#region ReservationCancellationReasonType

		public async Task<IRepositoryActionResult<ReservationCancellationReasonType>> InsertAsync(ReservationCancellationReasonType item)
		{
			var result = await InsertAsync<ReservationCancellationReasonType>(item);
			RunCustomLogicAfterInsert_ReservationCancellationReasonType(item, result);

			return result;
		}


		public IQueryable<ReservationCancellationReasonType> GetQueryable_ReservationCancellationReasonType()
		{
			return _ctx.Set<ReservationCancellationReasonType>();
		}

			public async Task<ReservationCancellationReasonType> Get_ReservationCancellationReasonTypeAsync(int reservationCancellationReasonTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_ReservationCancellationReasonType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_ReservationCancellationReasonType(ref qryItem, reservationCancellationReasonTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.ReservationCancellationReasonTypeId == reservationCancellationReasonTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_ReservationCancellationReasonType(ref dbItem, reservationCancellationReasonTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<ReservationCancellationReasonType> GetFirstOrDefaultAsync(ReservationCancellationReasonType item)
			{
				return await _ctx.ReservationCancellationReasonTypes.Where(x => x.ReservationCancellationReasonTypeId == item.ReservationCancellationReasonTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<ReservationCancellationReasonType>> UpdateAsync(ReservationCancellationReasonType item)
		{
			var oldItem = await _ctx.ReservationCancellationReasonTypes.FirstOrDefaultAsync(x => x.ReservationCancellationReasonTypeId == item.ReservationCancellationReasonTypeId);
			var result = await UpdateAsync<ReservationCancellationReasonType>(item, oldItem);
			RunCustomLogicAfterUpdate_ReservationCancellationReasonType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<ReservationCancellationReasonType>> Delete_ReservationCancellationReasonTypeAsync(int reservationCancellationReasonTypeId)
			{
				return await DeleteAsync<ReservationCancellationReasonType>(_ctx.ReservationCancellationReasonTypes.Where(x => x.ReservationCancellationReasonTypeId == reservationCancellationReasonTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<ReservationCancellationReasonType>> DeleteAsync(ReservationCancellationReasonType item)
			{
				return await DeleteAsync<ReservationCancellationReasonType>(_ctx.ReservationCancellationReasonTypes.Where(x => x.ReservationCancellationReasonTypeId == item.ReservationCancellationReasonTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_ReservationCancellationReasonType(ReservationCancellationReasonType item, IRepositoryActionResult<ReservationCancellationReasonType> result);

		partial void RunCustomLogicAfterUpdate_ReservationCancellationReasonType(ReservationCancellationReasonType newItem, ReservationCancellationReasonType oldItem, IRepositoryActionResult<ReservationCancellationReasonType> result);

		partial void RunCustomLogicOnGetQueryableByPK_ReservationCancellationReasonType(ref IQueryable<ReservationCancellationReasonType> qryItem, int reservationCancellationReasonTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_ReservationCancellationReasonType(ref ReservationCancellationReasonType dbItem, int reservationCancellationReasonTypeId, int numChildLevels);



		#endregion ReservationCancellationReasonType

		#region ReservationCancellationReasonTypeTranslation

		public async Task<IRepositoryActionResult<ReservationCancellationReasonTypeTranslation>> InsertAsync(ReservationCancellationReasonTypeTranslation item)
		{
			var result = await InsertAsync<ReservationCancellationReasonTypeTranslation>(item);
			RunCustomLogicAfterInsert_ReservationCancellationReasonTypeTranslation(item, result);

			return result;
		}


		public IQueryable<ReservationCancellationReasonTypeTranslation> GetQueryable_ReservationCancellationReasonTypeTranslation()
		{
			return _ctx.Set<ReservationCancellationReasonTypeTranslation>();
		}

			public async Task<ReservationCancellationReasonTypeTranslation> Get_ReservationCancellationReasonTypeTranslationAsync(int reservationCancellationReasonTypeTranslationId, int numChildLevels)
			{
				var qryItem = GetQueryable_ReservationCancellationReasonTypeTranslation().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_ReservationCancellationReasonTypeTranslation(ref qryItem, reservationCancellationReasonTypeTranslationId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.ReservationCancellationReasonTypeTranslationId == reservationCancellationReasonTypeTranslationId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_ReservationCancellationReasonTypeTranslation(ref dbItem, reservationCancellationReasonTypeTranslationId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<ReservationCancellationReasonTypeTranslation> GetFirstOrDefaultAsync(ReservationCancellationReasonTypeTranslation item)
			{
				return await _ctx.ReservationCancellationReasonTypeTranslations.Where(x => x.ReservationCancellationReasonTypeTranslationId == item.ReservationCancellationReasonTypeTranslationId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<ReservationCancellationReasonTypeTranslation>> UpdateAsync(ReservationCancellationReasonTypeTranslation item)
		{
			var oldItem = await _ctx.ReservationCancellationReasonTypeTranslations.FirstOrDefaultAsync(x => x.ReservationCancellationReasonTypeTranslationId == item.ReservationCancellationReasonTypeTranslationId);
			var result = await UpdateAsync<ReservationCancellationReasonTypeTranslation>(item, oldItem);
			RunCustomLogicAfterUpdate_ReservationCancellationReasonTypeTranslation(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<ReservationCancellationReasonTypeTranslation>> Delete_ReservationCancellationReasonTypeTranslationAsync(int reservationCancellationReasonTypeTranslationId)
			{
				return await DeleteAsync<ReservationCancellationReasonTypeTranslation>(_ctx.ReservationCancellationReasonTypeTranslations.Where(x => x.ReservationCancellationReasonTypeTranslationId == reservationCancellationReasonTypeTranslationId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<ReservationCancellationReasonTypeTranslation>> DeleteAsync(ReservationCancellationReasonTypeTranslation item)
			{
				return await DeleteAsync<ReservationCancellationReasonTypeTranslation>(_ctx.ReservationCancellationReasonTypeTranslations.Where(x => x.ReservationCancellationReasonTypeTranslationId == item.ReservationCancellationReasonTypeTranslationId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_ReservationCancellationReasonTypeTranslation(ReservationCancellationReasonTypeTranslation item, IRepositoryActionResult<ReservationCancellationReasonTypeTranslation> result);

		partial void RunCustomLogicAfterUpdate_ReservationCancellationReasonTypeTranslation(ReservationCancellationReasonTypeTranslation newItem, ReservationCancellationReasonTypeTranslation oldItem, IRepositoryActionResult<ReservationCancellationReasonTypeTranslation> result);

		partial void RunCustomLogicOnGetQueryableByPK_ReservationCancellationReasonTypeTranslation(ref IQueryable<ReservationCancellationReasonTypeTranslation> qryItem, int reservationCancellationReasonTypeTranslationId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_ReservationCancellationReasonTypeTranslation(ref ReservationCancellationReasonTypeTranslation dbItem, int reservationCancellationReasonTypeTranslationId, int numChildLevels);



		#endregion ReservationCancellationReasonTypeTranslation

		#region ReservationRequest

		public async Task<IRepositoryActionResult<ReservationRequest>> InsertAsync(ReservationRequest item)
		{
			var result = await InsertAsync<ReservationRequest>(item);
			RunCustomLogicAfterInsert_ReservationRequest(item, result);

			return result;
		}


		public IQueryable<ReservationRequest> GetQueryable_ReservationRequest()
		{
			return _ctx.Set<ReservationRequest>();
		}

			public async Task<ReservationRequest> Get_ReservationRequestAsync(System.Guid reservationRequestId, int numChildLevels)
			{
				var qryItem = GetQueryable_ReservationRequest().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_ReservationRequest(ref qryItem, reservationRequestId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.ReservationRequestId == reservationRequestId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_ReservationRequest(ref dbItem, reservationRequestId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<ReservationRequest> GetFirstOrDefaultAsync(ReservationRequest item)
			{
				return await _ctx.ReservationRequests.Where(x => x.ReservationRequestId == item.ReservationRequestId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<ReservationRequest>> UpdateAsync(ReservationRequest item)
		{
			var oldItem = await _ctx.ReservationRequests.FirstOrDefaultAsync(x => x.ReservationRequestId == item.ReservationRequestId);
			var result = await UpdateAsync<ReservationRequest>(item, oldItem);
			RunCustomLogicAfterUpdate_ReservationRequest(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<ReservationRequest>> Delete_ReservationRequestAsync(System.Guid reservationRequestId)
			{
				return await DeleteAsync<ReservationRequest>(_ctx.ReservationRequests.Where(x => x.ReservationRequestId == reservationRequestId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<ReservationRequest>> DeleteAsync(ReservationRequest item)
			{
				return await DeleteAsync<ReservationRequest>(_ctx.ReservationRequests.Where(x => x.ReservationRequestId == item.ReservationRequestId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_ReservationRequest(ReservationRequest item, IRepositoryActionResult<ReservationRequest> result);

		partial void RunCustomLogicAfterUpdate_ReservationRequest(ReservationRequest newItem, ReservationRequest oldItem, IRepositoryActionResult<ReservationRequest> result);

		partial void RunCustomLogicOnGetQueryableByPK_ReservationRequest(ref IQueryable<ReservationRequest> qryItem, System.Guid reservationRequestId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_ReservationRequest(ref ReservationRequest dbItem, System.Guid reservationRequestId, int numChildLevels);



		#endregion ReservationRequest

		#region ReservationRequestCancellationReasonType

		public async Task<IRepositoryActionResult<ReservationRequestCancellationReasonType>> InsertAsync(ReservationRequestCancellationReasonType item)
		{
			var result = await InsertAsync<ReservationRequestCancellationReasonType>(item);
			RunCustomLogicAfterInsert_ReservationRequestCancellationReasonType(item, result);

			return result;
		}


		public IQueryable<ReservationRequestCancellationReasonType> GetQueryable_ReservationRequestCancellationReasonType()
		{
			return _ctx.Set<ReservationRequestCancellationReasonType>();
		}

			public async Task<ReservationRequestCancellationReasonType> Get_ReservationRequestCancellationReasonTypeAsync(int reservationRequestCancellationReasonTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_ReservationRequestCancellationReasonType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_ReservationRequestCancellationReasonType(ref qryItem, reservationRequestCancellationReasonTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.ReservationRequestCancellationReasonTypeId == reservationRequestCancellationReasonTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_ReservationRequestCancellationReasonType(ref dbItem, reservationRequestCancellationReasonTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<ReservationRequestCancellationReasonType> GetFirstOrDefaultAsync(ReservationRequestCancellationReasonType item)
			{
				return await _ctx.ReservationRequestCancellationReasonTypes.Where(x => x.ReservationRequestCancellationReasonTypeId == item.ReservationRequestCancellationReasonTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<ReservationRequestCancellationReasonType>> UpdateAsync(ReservationRequestCancellationReasonType item)
		{
			var oldItem = await _ctx.ReservationRequestCancellationReasonTypes.FirstOrDefaultAsync(x => x.ReservationRequestCancellationReasonTypeId == item.ReservationRequestCancellationReasonTypeId);
			var result = await UpdateAsync<ReservationRequestCancellationReasonType>(item, oldItem);
			RunCustomLogicAfterUpdate_ReservationRequestCancellationReasonType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<ReservationRequestCancellationReasonType>> Delete_ReservationRequestCancellationReasonTypeAsync(int reservationRequestCancellationReasonTypeId)
			{
				return await DeleteAsync<ReservationRequestCancellationReasonType>(_ctx.ReservationRequestCancellationReasonTypes.Where(x => x.ReservationRequestCancellationReasonTypeId == reservationRequestCancellationReasonTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<ReservationRequestCancellationReasonType>> DeleteAsync(ReservationRequestCancellationReasonType item)
			{
				return await DeleteAsync<ReservationRequestCancellationReasonType>(_ctx.ReservationRequestCancellationReasonTypes.Where(x => x.ReservationRequestCancellationReasonTypeId == item.ReservationRequestCancellationReasonTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_ReservationRequestCancellationReasonType(ReservationRequestCancellationReasonType item, IRepositoryActionResult<ReservationRequestCancellationReasonType> result);

		partial void RunCustomLogicAfterUpdate_ReservationRequestCancellationReasonType(ReservationRequestCancellationReasonType newItem, ReservationRequestCancellationReasonType oldItem, IRepositoryActionResult<ReservationRequestCancellationReasonType> result);

		partial void RunCustomLogicOnGetQueryableByPK_ReservationRequestCancellationReasonType(ref IQueryable<ReservationRequestCancellationReasonType> qryItem, int reservationRequestCancellationReasonTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_ReservationRequestCancellationReasonType(ref ReservationRequestCancellationReasonType dbItem, int reservationRequestCancellationReasonTypeId, int numChildLevels);



		#endregion ReservationRequestCancellationReasonType

		#region ReservationRequestCancellationReasonTypeTranslation

		public async Task<IRepositoryActionResult<ReservationRequestCancellationReasonTypeTranslation>> InsertAsync(ReservationRequestCancellationReasonTypeTranslation item)
		{
			var result = await InsertAsync<ReservationRequestCancellationReasonTypeTranslation>(item);
			RunCustomLogicAfterInsert_ReservationRequestCancellationReasonTypeTranslation(item, result);

			return result;
		}


		public IQueryable<ReservationRequestCancellationReasonTypeTranslation> GetQueryable_ReservationRequestCancellationReasonTypeTranslation()
		{
			return _ctx.Set<ReservationRequestCancellationReasonTypeTranslation>();
		}

			public async Task<ReservationRequestCancellationReasonTypeTranslation> Get_ReservationRequestCancellationReasonTypeTranslationAsync(int reservationRequestCancellationReasonTypeTranslationId, int numChildLevels)
			{
				var qryItem = GetQueryable_ReservationRequestCancellationReasonTypeTranslation().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_ReservationRequestCancellationReasonTypeTranslation(ref qryItem, reservationRequestCancellationReasonTypeTranslationId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.ReservationRequestCancellationReasonTypeTranslationId == reservationRequestCancellationReasonTypeTranslationId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_ReservationRequestCancellationReasonTypeTranslation(ref dbItem, reservationRequestCancellationReasonTypeTranslationId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<ReservationRequestCancellationReasonTypeTranslation> GetFirstOrDefaultAsync(ReservationRequestCancellationReasonTypeTranslation item)
			{
				return await _ctx.ReservationRequestCancellationReasonTypeTranslations.Where(x => x.ReservationRequestCancellationReasonTypeTranslationId == item.ReservationRequestCancellationReasonTypeTranslationId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<ReservationRequestCancellationReasonTypeTranslation>> UpdateAsync(ReservationRequestCancellationReasonTypeTranslation item)
		{
			var oldItem = await _ctx.ReservationRequestCancellationReasonTypeTranslations.FirstOrDefaultAsync(x => x.ReservationRequestCancellationReasonTypeTranslationId == item.ReservationRequestCancellationReasonTypeTranslationId);
			var result = await UpdateAsync<ReservationRequestCancellationReasonTypeTranslation>(item, oldItem);
			RunCustomLogicAfterUpdate_ReservationRequestCancellationReasonTypeTranslation(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<ReservationRequestCancellationReasonTypeTranslation>> Delete_ReservationRequestCancellationReasonTypeTranslationAsync(int reservationRequestCancellationReasonTypeTranslationId)
			{
				return await DeleteAsync<ReservationRequestCancellationReasonTypeTranslation>(_ctx.ReservationRequestCancellationReasonTypeTranslations.Where(x => x.ReservationRequestCancellationReasonTypeTranslationId == reservationRequestCancellationReasonTypeTranslationId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<ReservationRequestCancellationReasonTypeTranslation>> DeleteAsync(ReservationRequestCancellationReasonTypeTranslation item)
			{
				return await DeleteAsync<ReservationRequestCancellationReasonTypeTranslation>(_ctx.ReservationRequestCancellationReasonTypeTranslations.Where(x => x.ReservationRequestCancellationReasonTypeTranslationId == item.ReservationRequestCancellationReasonTypeTranslationId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_ReservationRequestCancellationReasonTypeTranslation(ReservationRequestCancellationReasonTypeTranslation item, IRepositoryActionResult<ReservationRequestCancellationReasonTypeTranslation> result);

		partial void RunCustomLogicAfterUpdate_ReservationRequestCancellationReasonTypeTranslation(ReservationRequestCancellationReasonTypeTranslation newItem, ReservationRequestCancellationReasonTypeTranslation oldItem, IRepositoryActionResult<ReservationRequestCancellationReasonTypeTranslation> result);

		partial void RunCustomLogicOnGetQueryableByPK_ReservationRequestCancellationReasonTypeTranslation(ref IQueryable<ReservationRequestCancellationReasonTypeTranslation> qryItem, int reservationRequestCancellationReasonTypeTranslationId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_ReservationRequestCancellationReasonTypeTranslation(ref ReservationRequestCancellationReasonTypeTranslation dbItem, int reservationRequestCancellationReasonTypeTranslationId, int numChildLevels);



		#endregion ReservationRequestCancellationReasonTypeTranslation

		#region ReservationRequestOption

		public async Task<IRepositoryActionResult<ReservationRequestOption>> InsertAsync(ReservationRequestOption item)
		{
			var result = await InsertAsync<ReservationRequestOption>(item);
			RunCustomLogicAfterInsert_ReservationRequestOption(item, result);

			return result;
		}


		public IQueryable<ReservationRequestOption> GetQueryable_ReservationRequestOption()
		{
			return _ctx.Set<ReservationRequestOption>();
		}

			public async Task<ReservationRequestOption> Get_ReservationRequestOptionAsync(int reservationRequestOptionId, int numChildLevels)
			{
				var qryItem = GetQueryable_ReservationRequestOption().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_ReservationRequestOption(ref qryItem, reservationRequestOptionId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.ReservationRequestOptionId == reservationRequestOptionId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_ReservationRequestOption(ref dbItem, reservationRequestOptionId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<ReservationRequestOption> GetFirstOrDefaultAsync(ReservationRequestOption item)
			{
				return await _ctx.ReservationRequestOptions.Where(x => x.ReservationRequestOptionId == item.ReservationRequestOptionId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<ReservationRequestOption>> UpdateAsync(ReservationRequestOption item)
		{
			var oldItem = await _ctx.ReservationRequestOptions.FirstOrDefaultAsync(x => x.ReservationRequestOptionId == item.ReservationRequestOptionId);
			var result = await UpdateAsync<ReservationRequestOption>(item, oldItem);
			RunCustomLogicAfterUpdate_ReservationRequestOption(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<ReservationRequestOption>> Delete_ReservationRequestOptionAsync(int reservationRequestOptionId)
			{
				return await DeleteAsync<ReservationRequestOption>(_ctx.ReservationRequestOptions.Where(x => x.ReservationRequestOptionId == reservationRequestOptionId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<ReservationRequestOption>> DeleteAsync(ReservationRequestOption item)
			{
				return await DeleteAsync<ReservationRequestOption>(_ctx.ReservationRequestOptions.Where(x => x.ReservationRequestOptionId == item.ReservationRequestOptionId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_ReservationRequestOption(ReservationRequestOption item, IRepositoryActionResult<ReservationRequestOption> result);

		partial void RunCustomLogicAfterUpdate_ReservationRequestOption(ReservationRequestOption newItem, ReservationRequestOption oldItem, IRepositoryActionResult<ReservationRequestOption> result);

		partial void RunCustomLogicOnGetQueryableByPK_ReservationRequestOption(ref IQueryable<ReservationRequestOption> qryItem, int reservationRequestOptionId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_ReservationRequestOption(ref ReservationRequestOption dbItem, int reservationRequestOptionId, int numChildLevels);



		#endregion ReservationRequestOption

		#region ReservationRequestStatusType

		public async Task<IRepositoryActionResult<ReservationRequestStatusType>> InsertAsync(ReservationRequestStatusType item)
		{
			var result = await InsertAsync<ReservationRequestStatusType>(item);
			RunCustomLogicAfterInsert_ReservationRequestStatusType(item, result);

			return result;
		}


		public IQueryable<ReservationRequestStatusType> GetQueryable_ReservationRequestStatusType()
		{
			return _ctx.Set<ReservationRequestStatusType>();
		}

			public async Task<ReservationRequestStatusType> Get_ReservationRequestStatusTypeAsync(int reservationRequestStatusTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_ReservationRequestStatusType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_ReservationRequestStatusType(ref qryItem, reservationRequestStatusTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.ReservationRequestStatusTypeId == reservationRequestStatusTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_ReservationRequestStatusType(ref dbItem, reservationRequestStatusTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<ReservationRequestStatusType> GetFirstOrDefaultAsync(ReservationRequestStatusType item)
			{
				return await _ctx.ReservationRequestStatusTypes.Where(x => x.ReservationRequestStatusTypeId == item.ReservationRequestStatusTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<ReservationRequestStatusType>> UpdateAsync(ReservationRequestStatusType item)
		{
			var oldItem = await _ctx.ReservationRequestStatusTypes.FirstOrDefaultAsync(x => x.ReservationRequestStatusTypeId == item.ReservationRequestStatusTypeId);
			var result = await UpdateAsync<ReservationRequestStatusType>(item, oldItem);
			RunCustomLogicAfterUpdate_ReservationRequestStatusType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<ReservationRequestStatusType>> Delete_ReservationRequestStatusTypeAsync(int reservationRequestStatusTypeId)
			{
				return await DeleteAsync<ReservationRequestStatusType>(_ctx.ReservationRequestStatusTypes.Where(x => x.ReservationRequestStatusTypeId == reservationRequestStatusTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<ReservationRequestStatusType>> DeleteAsync(ReservationRequestStatusType item)
			{
				return await DeleteAsync<ReservationRequestStatusType>(_ctx.ReservationRequestStatusTypes.Where(x => x.ReservationRequestStatusTypeId == item.ReservationRequestStatusTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_ReservationRequestStatusType(ReservationRequestStatusType item, IRepositoryActionResult<ReservationRequestStatusType> result);

		partial void RunCustomLogicAfterUpdate_ReservationRequestStatusType(ReservationRequestStatusType newItem, ReservationRequestStatusType oldItem, IRepositoryActionResult<ReservationRequestStatusType> result);

		partial void RunCustomLogicOnGetQueryableByPK_ReservationRequestStatusType(ref IQueryable<ReservationRequestStatusType> qryItem, int reservationRequestStatusTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_ReservationRequestStatusType(ref ReservationRequestStatusType dbItem, int reservationRequestStatusTypeId, int numChildLevels);



		#endregion ReservationRequestStatusType

		#region ReservationRequestStatusTypeTranslation

		public async Task<IRepositoryActionResult<ReservationRequestStatusTypeTranslation>> InsertAsync(ReservationRequestStatusTypeTranslation item)
		{
			var result = await InsertAsync<ReservationRequestStatusTypeTranslation>(item);
			RunCustomLogicAfterInsert_ReservationRequestStatusTypeTranslation(item, result);

			return result;
		}


		public IQueryable<ReservationRequestStatusTypeTranslation> GetQueryable_ReservationRequestStatusTypeTranslation()
		{
			return _ctx.Set<ReservationRequestStatusTypeTranslation>();
		}

			public async Task<ReservationRequestStatusTypeTranslation> Get_ReservationRequestStatusTypeTranslationAsync(int reservationRequestStatusTypeTranslationId, int numChildLevels)
			{
				var qryItem = GetQueryable_ReservationRequestStatusTypeTranslation().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_ReservationRequestStatusTypeTranslation(ref qryItem, reservationRequestStatusTypeTranslationId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.ReservationRequestStatusTypeTranslationId == reservationRequestStatusTypeTranslationId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_ReservationRequestStatusTypeTranslation(ref dbItem, reservationRequestStatusTypeTranslationId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<ReservationRequestStatusTypeTranslation> GetFirstOrDefaultAsync(ReservationRequestStatusTypeTranslation item)
			{
				return await _ctx.ReservationRequestStatusTypeTranslations.Where(x => x.ReservationRequestStatusTypeTranslationId == item.ReservationRequestStatusTypeTranslationId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<ReservationRequestStatusTypeTranslation>> UpdateAsync(ReservationRequestStatusTypeTranslation item)
		{
			var oldItem = await _ctx.ReservationRequestStatusTypeTranslations.FirstOrDefaultAsync(x => x.ReservationRequestStatusTypeTranslationId == item.ReservationRequestStatusTypeTranslationId);
			var result = await UpdateAsync<ReservationRequestStatusTypeTranslation>(item, oldItem);
			RunCustomLogicAfterUpdate_ReservationRequestStatusTypeTranslation(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<ReservationRequestStatusTypeTranslation>> Delete_ReservationRequestStatusTypeTranslationAsync(int reservationRequestStatusTypeTranslationId)
			{
				return await DeleteAsync<ReservationRequestStatusTypeTranslation>(_ctx.ReservationRequestStatusTypeTranslations.Where(x => x.ReservationRequestStatusTypeTranslationId == reservationRequestStatusTypeTranslationId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<ReservationRequestStatusTypeTranslation>> DeleteAsync(ReservationRequestStatusTypeTranslation item)
			{
				return await DeleteAsync<ReservationRequestStatusTypeTranslation>(_ctx.ReservationRequestStatusTypeTranslations.Where(x => x.ReservationRequestStatusTypeTranslationId == item.ReservationRequestStatusTypeTranslationId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_ReservationRequestStatusTypeTranslation(ReservationRequestStatusTypeTranslation item, IRepositoryActionResult<ReservationRequestStatusTypeTranslation> result);

		partial void RunCustomLogicAfterUpdate_ReservationRequestStatusTypeTranslation(ReservationRequestStatusTypeTranslation newItem, ReservationRequestStatusTypeTranslation oldItem, IRepositoryActionResult<ReservationRequestStatusTypeTranslation> result);

		partial void RunCustomLogicOnGetQueryableByPK_ReservationRequestStatusTypeTranslation(ref IQueryable<ReservationRequestStatusTypeTranslation> qryItem, int reservationRequestStatusTypeTranslationId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_ReservationRequestStatusTypeTranslation(ref ReservationRequestStatusTypeTranslation dbItem, int reservationRequestStatusTypeTranslationId, int numChildLevels);



		#endregion ReservationRequestStatusTypeTranslation

		#region ReservationStatusType

		public async Task<IRepositoryActionResult<ReservationStatusType>> InsertAsync(ReservationStatusType item)
		{
			var result = await InsertAsync<ReservationStatusType>(item);
			RunCustomLogicAfterInsert_ReservationStatusType(item, result);

			return result;
		}


		public IQueryable<ReservationStatusType> GetQueryable_ReservationStatusType()
		{
			return _ctx.Set<ReservationStatusType>();
		}

			public async Task<ReservationStatusType> Get_ReservationStatusTypeAsync(int reservationStatusTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_ReservationStatusType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_ReservationStatusType(ref qryItem, reservationStatusTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.ReservationStatusTypeId == reservationStatusTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_ReservationStatusType(ref dbItem, reservationStatusTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<ReservationStatusType> GetFirstOrDefaultAsync(ReservationStatusType item)
			{
				return await _ctx.ReservationStatusTypes.Where(x => x.ReservationStatusTypeId == item.ReservationStatusTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<ReservationStatusType>> UpdateAsync(ReservationStatusType item)
		{
			var oldItem = await _ctx.ReservationStatusTypes.FirstOrDefaultAsync(x => x.ReservationStatusTypeId == item.ReservationStatusTypeId);
			var result = await UpdateAsync<ReservationStatusType>(item, oldItem);
			RunCustomLogicAfterUpdate_ReservationStatusType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<ReservationStatusType>> Delete_ReservationStatusTypeAsync(int reservationStatusTypeId)
			{
				return await DeleteAsync<ReservationStatusType>(_ctx.ReservationStatusTypes.Where(x => x.ReservationStatusTypeId == reservationStatusTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<ReservationStatusType>> DeleteAsync(ReservationStatusType item)
			{
				return await DeleteAsync<ReservationStatusType>(_ctx.ReservationStatusTypes.Where(x => x.ReservationStatusTypeId == item.ReservationStatusTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_ReservationStatusType(ReservationStatusType item, IRepositoryActionResult<ReservationStatusType> result);

		partial void RunCustomLogicAfterUpdate_ReservationStatusType(ReservationStatusType newItem, ReservationStatusType oldItem, IRepositoryActionResult<ReservationStatusType> result);

		partial void RunCustomLogicOnGetQueryableByPK_ReservationStatusType(ref IQueryable<ReservationStatusType> qryItem, int reservationStatusTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_ReservationStatusType(ref ReservationStatusType dbItem, int reservationStatusTypeId, int numChildLevels);



		#endregion ReservationStatusType

		#region ReservationStatusTypeTranslation

		public async Task<IRepositoryActionResult<ReservationStatusTypeTranslation>> InsertAsync(ReservationStatusTypeTranslation item)
		{
			var result = await InsertAsync<ReservationStatusTypeTranslation>(item);
			RunCustomLogicAfterInsert_ReservationStatusTypeTranslation(item, result);

			return result;
		}


		public IQueryable<ReservationStatusTypeTranslation> GetQueryable_ReservationStatusTypeTranslation()
		{
			return _ctx.Set<ReservationStatusTypeTranslation>();
		}

			public async Task<ReservationStatusTypeTranslation> Get_ReservationStatusTypeTranslationAsync(int reservationStatusTypeTranslationId, int numChildLevels)
			{
				var qryItem = GetQueryable_ReservationStatusTypeTranslation().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_ReservationStatusTypeTranslation(ref qryItem, reservationStatusTypeTranslationId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.ReservationStatusTypeTranslationId == reservationStatusTypeTranslationId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_ReservationStatusTypeTranslation(ref dbItem, reservationStatusTypeTranslationId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<ReservationStatusTypeTranslation> GetFirstOrDefaultAsync(ReservationStatusTypeTranslation item)
			{
				return await _ctx.ReservationStatusTypeTranslations.Where(x => x.ReservationStatusTypeTranslationId == item.ReservationStatusTypeTranslationId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<ReservationStatusTypeTranslation>> UpdateAsync(ReservationStatusTypeTranslation item)
		{
			var oldItem = await _ctx.ReservationStatusTypeTranslations.FirstOrDefaultAsync(x => x.ReservationStatusTypeTranslationId == item.ReservationStatusTypeTranslationId);
			var result = await UpdateAsync<ReservationStatusTypeTranslation>(item, oldItem);
			RunCustomLogicAfterUpdate_ReservationStatusTypeTranslation(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<ReservationStatusTypeTranslation>> Delete_ReservationStatusTypeTranslationAsync(int reservationStatusTypeTranslationId)
			{
				return await DeleteAsync<ReservationStatusTypeTranslation>(_ctx.ReservationStatusTypeTranslations.Where(x => x.ReservationStatusTypeTranslationId == reservationStatusTypeTranslationId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<ReservationStatusTypeTranslation>> DeleteAsync(ReservationStatusTypeTranslation item)
			{
				return await DeleteAsync<ReservationStatusTypeTranslation>(_ctx.ReservationStatusTypeTranslations.Where(x => x.ReservationStatusTypeTranslationId == item.ReservationStatusTypeTranslationId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_ReservationStatusTypeTranslation(ReservationStatusTypeTranslation item, IRepositoryActionResult<ReservationStatusTypeTranslation> result);

		partial void RunCustomLogicAfterUpdate_ReservationStatusTypeTranslation(ReservationStatusTypeTranslation newItem, ReservationStatusTypeTranslation oldItem, IRepositoryActionResult<ReservationStatusTypeTranslation> result);

		partial void RunCustomLogicOnGetQueryableByPK_ReservationStatusTypeTranslation(ref IQueryable<ReservationStatusTypeTranslation> qryItem, int reservationStatusTypeTranslationId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_ReservationStatusTypeTranslation(ref ReservationStatusTypeTranslation dbItem, int reservationStatusTypeTranslationId, int numChildLevels);



		#endregion ReservationStatusTypeTranslation

		#region Ride

		public async Task<IRepositoryActionResult<Ride>> InsertAsync(Ride item)
		{
			var result = await InsertAsync<Ride>(item);
			RunCustomLogicAfterInsert_Ride(item, result);

			return result;
		}


		public IQueryable<Ride> GetQueryable_Ride()
		{
			return _ctx.Set<Ride>();
		}

			public async Task<Ride> Get_RideAsync(System.Guid rideId, int numChildLevels)
			{
				var qryItem = GetQueryable_Ride().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_Ride(ref qryItem, rideId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.RideId == rideId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_Ride(ref dbItem, rideId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<Ride> GetFirstOrDefaultAsync(Ride item)
			{
				return await _ctx.Rides.Where(x => x.RideId == item.RideId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<Ride>> UpdateAsync(Ride item)
		{
			var oldItem = await _ctx.Rides.FirstOrDefaultAsync(x => x.RideId == item.RideId);
			var result = await UpdateAsync<Ride>(item, oldItem);
			RunCustomLogicAfterUpdate_Ride(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<Ride>> Delete_RideAsync(System.Guid rideId)
			{
				return await DeleteAsync<Ride>(_ctx.Rides.Where(x => x.RideId == rideId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<Ride>> DeleteAsync(Ride item)
			{
				return await DeleteAsync<Ride>(_ctx.Rides.Where(x => x.RideId == item.RideId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_Ride(Ride item, IRepositoryActionResult<Ride> result);

		partial void RunCustomLogicAfterUpdate_Ride(Ride newItem, Ride oldItem, IRepositoryActionResult<Ride> result);

		partial void RunCustomLogicOnGetQueryableByPK_Ride(ref IQueryable<Ride> qryItem, System.Guid rideId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_Ride(ref Ride dbItem, System.Guid rideId, int numChildLevels);



		#endregion Ride

		#region RidePosition

		public async Task<IRepositoryActionResult<RidePosition>> InsertAsync(RidePosition item)
		{
			var result = await InsertAsync<RidePosition>(item);
			RunCustomLogicAfterInsert_RidePosition(item, result);

			return result;
		}


		public IQueryable<RidePosition> GetQueryable_RidePosition()
		{
			return _ctx.Set<RidePosition>();
		}

			public async Task<RidePosition> Get_RidePositionAsync(System.Guid ridePositionId, int numChildLevels)
			{
				var qryItem = GetQueryable_RidePosition().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_RidePosition(ref qryItem, ridePositionId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.RidePositionId == ridePositionId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_RidePosition(ref dbItem, ridePositionId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<RidePosition> GetFirstOrDefaultAsync(RidePosition item)
			{
				return await _ctx.RidePositions.Where(x => x.RidePositionId == item.RidePositionId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<RidePosition>> UpdateAsync(RidePosition item)
		{
			var oldItem = await _ctx.RidePositions.FirstOrDefaultAsync(x => x.RidePositionId == item.RidePositionId);
			var result = await UpdateAsync<RidePosition>(item, oldItem);
			RunCustomLogicAfterUpdate_RidePosition(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<RidePosition>> Delete_RidePositionAsync(System.Guid ridePositionId)
			{
				return await DeleteAsync<RidePosition>(_ctx.RidePositions.Where(x => x.RidePositionId == ridePositionId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<RidePosition>> DeleteAsync(RidePosition item)
			{
				return await DeleteAsync<RidePosition>(_ctx.RidePositions.Where(x => x.RidePositionId == item.RidePositionId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_RidePosition(RidePosition item, IRepositoryActionResult<RidePosition> result);

		partial void RunCustomLogicAfterUpdate_RidePosition(RidePosition newItem, RidePosition oldItem, IRepositoryActionResult<RidePosition> result);

		partial void RunCustomLogicOnGetQueryableByPK_RidePosition(ref IQueryable<RidePosition> qryItem, System.Guid ridePositionId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_RidePosition(ref RidePosition dbItem, System.Guid ridePositionId, int numChildLevels);



		#endregion RidePosition

		#region RideServiceType

		public async Task<IRepositoryActionResult<RideServiceType>> InsertAsync(RideServiceType item)
		{
			var result = await InsertAsync<RideServiceType>(item);
			RunCustomLogicAfterInsert_RideServiceType(item, result);

			return result;
		}


		public IQueryable<RideServiceType> GetQueryable_RideServiceType()
		{
			return _ctx.Set<RideServiceType>();
		}

			public async Task<RideServiceType> Get_RideServiceTypeAsync(int rideServiceTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_RideServiceType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_RideServiceType(ref qryItem, rideServiceTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.RideServiceTypeId == rideServiceTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_RideServiceType(ref dbItem, rideServiceTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<RideServiceType> GetFirstOrDefaultAsync(RideServiceType item)
			{
				return await _ctx.RideServiceTypes.Where(x => x.RideServiceTypeId == item.RideServiceTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<RideServiceType>> UpdateAsync(RideServiceType item)
		{
			var oldItem = await _ctx.RideServiceTypes.FirstOrDefaultAsync(x => x.RideServiceTypeId == item.RideServiceTypeId);
			var result = await UpdateAsync<RideServiceType>(item, oldItem);
			RunCustomLogicAfterUpdate_RideServiceType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<RideServiceType>> Delete_RideServiceTypeAsync(int rideServiceTypeId)
			{
				return await DeleteAsync<RideServiceType>(_ctx.RideServiceTypes.Where(x => x.RideServiceTypeId == rideServiceTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<RideServiceType>> DeleteAsync(RideServiceType item)
			{
				return await DeleteAsync<RideServiceType>(_ctx.RideServiceTypes.Where(x => x.RideServiceTypeId == item.RideServiceTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_RideServiceType(RideServiceType item, IRepositoryActionResult<RideServiceType> result);

		partial void RunCustomLogicAfterUpdate_RideServiceType(RideServiceType newItem, RideServiceType oldItem, IRepositoryActionResult<RideServiceType> result);

		partial void RunCustomLogicOnGetQueryableByPK_RideServiceType(ref IQueryable<RideServiceType> qryItem, int rideServiceTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_RideServiceType(ref RideServiceType dbItem, int rideServiceTypeId, int numChildLevels);



		#endregion RideServiceType

		#region RideServiceTypeTranslation

		public async Task<IRepositoryActionResult<RideServiceTypeTranslation>> InsertAsync(RideServiceTypeTranslation item)
		{
			var result = await InsertAsync<RideServiceTypeTranslation>(item);
			RunCustomLogicAfterInsert_RideServiceTypeTranslation(item, result);

			return result;
		}


		public IQueryable<RideServiceTypeTranslation> GetQueryable_RideServiceTypeTranslation()
		{
			return _ctx.Set<RideServiceTypeTranslation>();
		}

			public async Task<RideServiceTypeTranslation> Get_RideServiceTypeTranslationAsync(int rideServiceTypeTranslationId, int numChildLevels)
			{
				var qryItem = GetQueryable_RideServiceTypeTranslation().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_RideServiceTypeTranslation(ref qryItem, rideServiceTypeTranslationId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.RideServiceTypeTranslationId == rideServiceTypeTranslationId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_RideServiceTypeTranslation(ref dbItem, rideServiceTypeTranslationId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<RideServiceTypeTranslation> GetFirstOrDefaultAsync(RideServiceTypeTranslation item)
			{
				return await _ctx.RideServiceTypeTranslations.Where(x => x.RideServiceTypeTranslationId == item.RideServiceTypeTranslationId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<RideServiceTypeTranslation>> UpdateAsync(RideServiceTypeTranslation item)
		{
			var oldItem = await _ctx.RideServiceTypeTranslations.FirstOrDefaultAsync(x => x.RideServiceTypeTranslationId == item.RideServiceTypeTranslationId);
			var result = await UpdateAsync<RideServiceTypeTranslation>(item, oldItem);
			RunCustomLogicAfterUpdate_RideServiceTypeTranslation(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<RideServiceTypeTranslation>> Delete_RideServiceTypeTranslationAsync(int rideServiceTypeTranslationId)
			{
				return await DeleteAsync<RideServiceTypeTranslation>(_ctx.RideServiceTypeTranslations.Where(x => x.RideServiceTypeTranslationId == rideServiceTypeTranslationId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<RideServiceTypeTranslation>> DeleteAsync(RideServiceTypeTranslation item)
			{
				return await DeleteAsync<RideServiceTypeTranslation>(_ctx.RideServiceTypeTranslations.Where(x => x.RideServiceTypeTranslationId == item.RideServiceTypeTranslationId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_RideServiceTypeTranslation(RideServiceTypeTranslation item, IRepositoryActionResult<RideServiceTypeTranslation> result);

		partial void RunCustomLogicAfterUpdate_RideServiceTypeTranslation(RideServiceTypeTranslation newItem, RideServiceTypeTranslation oldItem, IRepositoryActionResult<RideServiceTypeTranslation> result);

		partial void RunCustomLogicOnGetQueryableByPK_RideServiceTypeTranslation(ref IQueryable<RideServiceTypeTranslation> qryItem, int rideServiceTypeTranslationId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_RideServiceTypeTranslation(ref RideServiceTypeTranslation dbItem, int rideServiceTypeTranslationId, int numChildLevels);



		#endregion RideServiceTypeTranslation

		#region User

		public async Task<IRepositoryActionResult<User>> InsertAsync(User item)
		{
			var result = await InsertAsync<User>(item);
			RunCustomLogicAfterInsert_User(item, result);

			return result;
		}


		public IQueryable<User> GetQueryable_User()
		{
			return _ctx.Set<User>();
		}

			public async Task<User> Get_UserAsync(int userId, int numChildLevels)
			{
				var qryItem = GetQueryable_User().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_User(ref qryItem, userId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.UserId == userId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_User(ref dbItem, userId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<User> GetFirstOrDefaultAsync(User item)
			{
				return await _ctx.Users.Where(x => x.UserId == item.UserId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<User>> UpdateAsync(User item)
		{
			var oldItem = await _ctx.Users.FirstOrDefaultAsync(x => x.UserId == item.UserId);
			var result = await UpdateAsync<User>(item, oldItem);
			RunCustomLogicAfterUpdate_User(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<User>> Delete_UserAsync(int userId)
			{
				return await DeleteAsync<User>(_ctx.Users.Where(x => x.UserId == userId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<User>> DeleteAsync(User item)
			{
				return await DeleteAsync<User>(_ctx.Users.Where(x => x.UserId == item.UserId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_User(User item, IRepositoryActionResult<User> result);

		partial void RunCustomLogicAfterUpdate_User(User newItem, User oldItem, IRepositoryActionResult<User> result);

		partial void RunCustomLogicOnGetQueryableByPK_User(ref IQueryable<User> qryItem, int userId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_User(ref User dbItem, int userId, int numChildLevels);



		#endregion User

		#region UserRewardAccount

		public async Task<IRepositoryActionResult<UserRewardAccount>> InsertAsync(UserRewardAccount item)
		{
			var result = await InsertAsync<UserRewardAccount>(item);
			RunCustomLogicAfterInsert_UserRewardAccount(item, result);

			return result;
		}


		public IQueryable<UserRewardAccount> GetQueryable_UserRewardAccount()
		{
			return _ctx.Set<UserRewardAccount>();
		}

			public async Task<UserRewardAccount> Get_UserRewardAccountAsync(int userId, int numChildLevels)
			{
				var qryItem = GetQueryable_UserRewardAccount().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_UserRewardAccount(ref qryItem, userId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.UserId == userId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_UserRewardAccount(ref dbItem, userId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<UserRewardAccount> GetFirstOrDefaultAsync(UserRewardAccount item)
			{
				return await _ctx.UserRewardAccounts.Where(x => x.UserId == item.UserId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<UserRewardAccount>> UpdateAsync(UserRewardAccount item)
		{
			var oldItem = await _ctx.UserRewardAccounts.FirstOrDefaultAsync(x => x.UserId == item.UserId);
			var result = await UpdateAsync<UserRewardAccount>(item, oldItem);
			RunCustomLogicAfterUpdate_UserRewardAccount(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<UserRewardAccount>> Delete_UserRewardAccountAsync(int userId)
			{
				return await DeleteAsync<UserRewardAccount>(_ctx.UserRewardAccounts.Where(x => x.UserId == userId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<UserRewardAccount>> DeleteAsync(UserRewardAccount item)
			{
				return await DeleteAsync<UserRewardAccount>(_ctx.UserRewardAccounts.Where(x => x.UserId == item.UserId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_UserRewardAccount(UserRewardAccount item, IRepositoryActionResult<UserRewardAccount> result);

		partial void RunCustomLogicAfterUpdate_UserRewardAccount(UserRewardAccount newItem, UserRewardAccount oldItem, IRepositoryActionResult<UserRewardAccount> result);

		partial void RunCustomLogicOnGetQueryableByPK_UserRewardAccount(ref IQueryable<UserRewardAccount> qryItem, int userId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_UserRewardAccount(ref UserRewardAccount dbItem, int userId, int numChildLevels);



		#endregion UserRewardAccount

		#region UserRewardAccountTransaction

		public async Task<IRepositoryActionResult<UserRewardAccountTransaction>> InsertAsync(UserRewardAccountTransaction item)
		{
			var result = await InsertAsync<UserRewardAccountTransaction>(item);
			RunCustomLogicAfterInsert_UserRewardAccountTransaction(item, result);

			return result;
		}


		public IQueryable<UserRewardAccountTransaction> GetQueryable_UserRewardAccountTransaction()
		{
			return _ctx.Set<UserRewardAccountTransaction>();
		}

			public async Task<UserRewardAccountTransaction> Get_UserRewardAccountTransactionAsync(System.Guid userRewardAccountTransactionId, int numChildLevels)
			{
				var qryItem = GetQueryable_UserRewardAccountTransaction().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_UserRewardAccountTransaction(ref qryItem, userRewardAccountTransactionId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.UserRewardAccountTransactionId == userRewardAccountTransactionId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_UserRewardAccountTransaction(ref dbItem, userRewardAccountTransactionId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<UserRewardAccountTransaction> GetFirstOrDefaultAsync(UserRewardAccountTransaction item)
			{
				return await _ctx.UserRewardAccountTransactions.Where(x => x.UserRewardAccountTransactionId == item.UserRewardAccountTransactionId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<UserRewardAccountTransaction>> UpdateAsync(UserRewardAccountTransaction item)
		{
			var oldItem = await _ctx.UserRewardAccountTransactions.FirstOrDefaultAsync(x => x.UserRewardAccountTransactionId == item.UserRewardAccountTransactionId);
			var result = await UpdateAsync<UserRewardAccountTransaction>(item, oldItem);
			RunCustomLogicAfterUpdate_UserRewardAccountTransaction(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<UserRewardAccountTransaction>> Delete_UserRewardAccountTransactionAsync(System.Guid userRewardAccountTransactionId)
			{
				return await DeleteAsync<UserRewardAccountTransaction>(_ctx.UserRewardAccountTransactions.Where(x => x.UserRewardAccountTransactionId == userRewardAccountTransactionId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<UserRewardAccountTransaction>> DeleteAsync(UserRewardAccountTransaction item)
			{
				return await DeleteAsync<UserRewardAccountTransaction>(_ctx.UserRewardAccountTransactions.Where(x => x.UserRewardAccountTransactionId == item.UserRewardAccountTransactionId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_UserRewardAccountTransaction(UserRewardAccountTransaction item, IRepositoryActionResult<UserRewardAccountTransaction> result);

		partial void RunCustomLogicAfterUpdate_UserRewardAccountTransaction(UserRewardAccountTransaction newItem, UserRewardAccountTransaction oldItem, IRepositoryActionResult<UserRewardAccountTransaction> result);

		partial void RunCustomLogicOnGetQueryableByPK_UserRewardAccountTransaction(ref IQueryable<UserRewardAccountTransaction> qryItem, System.Guid userRewardAccountTransactionId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_UserRewardAccountTransaction(ref UserRewardAccountTransaction dbItem, System.Guid userRewardAccountTransactionId, int numChildLevels);



		#endregion UserRewardAccountTransaction

		#region UserRewardAccountTransactionType

		public async Task<IRepositoryActionResult<UserRewardAccountTransactionType>> InsertAsync(UserRewardAccountTransactionType item)
		{
			var result = await InsertAsync<UserRewardAccountTransactionType>(item);
			RunCustomLogicAfterInsert_UserRewardAccountTransactionType(item, result);

			return result;
		}


		public IQueryable<UserRewardAccountTransactionType> GetQueryable_UserRewardAccountTransactionType()
		{
			return _ctx.Set<UserRewardAccountTransactionType>();
		}

			public async Task<UserRewardAccountTransactionType> Get_UserRewardAccountTransactionTypeAsync(int userRewardAccountTransactionTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_UserRewardAccountTransactionType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_UserRewardAccountTransactionType(ref qryItem, userRewardAccountTransactionTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.UserRewardAccountTransactionTypeId == userRewardAccountTransactionTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_UserRewardAccountTransactionType(ref dbItem, userRewardAccountTransactionTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<UserRewardAccountTransactionType> GetFirstOrDefaultAsync(UserRewardAccountTransactionType item)
			{
				return await _ctx.UserRewardAccountTransactionTypes.Where(x => x.UserRewardAccountTransactionTypeId == item.UserRewardAccountTransactionTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<UserRewardAccountTransactionType>> UpdateAsync(UserRewardAccountTransactionType item)
		{
			var oldItem = await _ctx.UserRewardAccountTransactionTypes.FirstOrDefaultAsync(x => x.UserRewardAccountTransactionTypeId == item.UserRewardAccountTransactionTypeId);
			var result = await UpdateAsync<UserRewardAccountTransactionType>(item, oldItem);
			RunCustomLogicAfterUpdate_UserRewardAccountTransactionType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<UserRewardAccountTransactionType>> Delete_UserRewardAccountTransactionTypeAsync(int userRewardAccountTransactionTypeId)
			{
				return await DeleteAsync<UserRewardAccountTransactionType>(_ctx.UserRewardAccountTransactionTypes.Where(x => x.UserRewardAccountTransactionTypeId == userRewardAccountTransactionTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<UserRewardAccountTransactionType>> DeleteAsync(UserRewardAccountTransactionType item)
			{
				return await DeleteAsync<UserRewardAccountTransactionType>(_ctx.UserRewardAccountTransactionTypes.Where(x => x.UserRewardAccountTransactionTypeId == item.UserRewardAccountTransactionTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_UserRewardAccountTransactionType(UserRewardAccountTransactionType item, IRepositoryActionResult<UserRewardAccountTransactionType> result);

		partial void RunCustomLogicAfterUpdate_UserRewardAccountTransactionType(UserRewardAccountTransactionType newItem, UserRewardAccountTransactionType oldItem, IRepositoryActionResult<UserRewardAccountTransactionType> result);

		partial void RunCustomLogicOnGetQueryableByPK_UserRewardAccountTransactionType(ref IQueryable<UserRewardAccountTransactionType> qryItem, int userRewardAccountTransactionTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_UserRewardAccountTransactionType(ref UserRewardAccountTransactionType dbItem, int userRewardAccountTransactionTypeId, int numChildLevels);



		#endregion UserRewardAccountTransactionType

		#region UserRewardAccountTransactionTypeTranslation

		public async Task<IRepositoryActionResult<UserRewardAccountTransactionTypeTranslation>> InsertAsync(UserRewardAccountTransactionTypeTranslation item)
		{
			var result = await InsertAsync<UserRewardAccountTransactionTypeTranslation>(item);
			RunCustomLogicAfterInsert_UserRewardAccountTransactionTypeTranslation(item, result);

			return result;
		}


		public IQueryable<UserRewardAccountTransactionTypeTranslation> GetQueryable_UserRewardAccountTransactionTypeTranslation()
		{
			return _ctx.Set<UserRewardAccountTransactionTypeTranslation>();
		}

			public async Task<UserRewardAccountTransactionTypeTranslation> Get_UserRewardAccountTransactionTypeTranslationAsync(int userRewardAccountTransactionTypeTranslationId, int numChildLevels)
			{
				var qryItem = GetQueryable_UserRewardAccountTransactionTypeTranslation().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_UserRewardAccountTransactionTypeTranslation(ref qryItem, userRewardAccountTransactionTypeTranslationId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.UserRewardAccountTransactionTypeTranslationId == userRewardAccountTransactionTypeTranslationId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_UserRewardAccountTransactionTypeTranslation(ref dbItem, userRewardAccountTransactionTypeTranslationId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<UserRewardAccountTransactionTypeTranslation> GetFirstOrDefaultAsync(UserRewardAccountTransactionTypeTranslation item)
			{
				return await _ctx.UserRewardAccountTransactionTypeTranslations.Where(x => x.UserRewardAccountTransactionTypeTranslationId == item.UserRewardAccountTransactionTypeTranslationId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<UserRewardAccountTransactionTypeTranslation>> UpdateAsync(UserRewardAccountTransactionTypeTranslation item)
		{
			var oldItem = await _ctx.UserRewardAccountTransactionTypeTranslations.FirstOrDefaultAsync(x => x.UserRewardAccountTransactionTypeTranslationId == item.UserRewardAccountTransactionTypeTranslationId);
			var result = await UpdateAsync<UserRewardAccountTransactionTypeTranslation>(item, oldItem);
			RunCustomLogicAfterUpdate_UserRewardAccountTransactionTypeTranslation(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<UserRewardAccountTransactionTypeTranslation>> Delete_UserRewardAccountTransactionTypeTranslationAsync(int userRewardAccountTransactionTypeTranslationId)
			{
				return await DeleteAsync<UserRewardAccountTransactionTypeTranslation>(_ctx.UserRewardAccountTransactionTypeTranslations.Where(x => x.UserRewardAccountTransactionTypeTranslationId == userRewardAccountTransactionTypeTranslationId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<UserRewardAccountTransactionTypeTranslation>> DeleteAsync(UserRewardAccountTransactionTypeTranslation item)
			{
				return await DeleteAsync<UserRewardAccountTransactionTypeTranslation>(_ctx.UserRewardAccountTransactionTypeTranslations.Where(x => x.UserRewardAccountTransactionTypeTranslationId == item.UserRewardAccountTransactionTypeTranslationId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_UserRewardAccountTransactionTypeTranslation(UserRewardAccountTransactionTypeTranslation item, IRepositoryActionResult<UserRewardAccountTransactionTypeTranslation> result);

		partial void RunCustomLogicAfterUpdate_UserRewardAccountTransactionTypeTranslation(UserRewardAccountTransactionTypeTranslation newItem, UserRewardAccountTransactionTypeTranslation oldItem, IRepositoryActionResult<UserRewardAccountTransactionTypeTranslation> result);

		partial void RunCustomLogicOnGetQueryableByPK_UserRewardAccountTransactionTypeTranslation(ref IQueryable<UserRewardAccountTransactionTypeTranslation> qryItem, int userRewardAccountTransactionTypeTranslationId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_UserRewardAccountTransactionTypeTranslation(ref UserRewardAccountTransactionTypeTranslation dbItem, int userRewardAccountTransactionTypeTranslationId, int numChildLevels);



		#endregion UserRewardAccountTransactionTypeTranslation

		#region UsersLocation

		public async Task<IRepositoryActionResult<UsersLocation>> InsertAsync(UsersLocation item)
		{
			var result = await InsertAsync<UsersLocation>(item);
			RunCustomLogicAfterInsert_UsersLocation(item, result);

			return result;
		}


		public IQueryable<UsersLocation> GetQueryable_UsersLocation()
		{
			return _ctx.Set<UsersLocation>();
		}

			public async Task<UsersLocation> Get_UsersLocationAsync(int userId, System.Guid locationId, int numChildLevels)
			{
				var qryItem = GetQueryable_UsersLocation().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_UsersLocation(ref qryItem, userId, locationId, numChildLevels);

				var dbItem = await qryItem.Where(
						x => x.UserId == userId
						&& x.LocationId == locationId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_UsersLocation(ref dbItem, userId, locationId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<UsersLocation> GetFirstOrDefaultAsync(UsersLocation item)
			{
				return await _ctx.UsersLocations.Where(
						x => x.UserId == item.UserId
						&& x.LocationId == item.LocationId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<UsersLocation>> UpdateAsync(UsersLocation item)
		{
			var oldItem = await _ctx.UsersLocations.FirstOrDefaultAsync(
						x => x.UserId == item.UserId
						&& x.LocationId == item.LocationId);
			var result = await UpdateAsync<UsersLocation>(item, oldItem);
			RunCustomLogicAfterUpdate_UsersLocation(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<UsersLocation>> Delete_UsersLocationAsync(int userId, System.Guid locationId)
			{
				return await DeleteAsync<UsersLocation>(_ctx.UsersLocations.Where(
						x => x.UserId == userId
						&& x.LocationId == locationId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<UsersLocation>> DeleteAsync(UsersLocation item)
			{
				return await DeleteAsync<UsersLocation>(_ctx.UsersLocations.Where(
						x => x.UserId == item.UserId
						&& x.LocationId == item.LocationId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_UsersLocation(UsersLocation item, IRepositoryActionResult<UsersLocation> result);

		partial void RunCustomLogicAfterUpdate_UsersLocation(UsersLocation newItem, UsersLocation oldItem, IRepositoryActionResult<UsersLocation> result);

		partial void RunCustomLogicOnGetQueryableByPK_UsersLocation(ref IQueryable<UsersLocation> qryItem, int userId, System.Guid locationId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_UsersLocation(ref UsersLocation dbItem, int userId, System.Guid locationId, int numChildLevels);



		#endregion UsersLocation

		#region UsersNotificationType

		public async Task<IRepositoryActionResult<UsersNotificationType>> InsertAsync(UsersNotificationType item)
		{
			var result = await InsertAsync<UsersNotificationType>(item);
			RunCustomLogicAfterInsert_UsersNotificationType(item, result);

			return result;
		}


		public IQueryable<UsersNotificationType> GetQueryable_UsersNotificationType()
		{
			return _ctx.Set<UsersNotificationType>();
		}

			public async Task<UsersNotificationType> Get_UsersNotificationTypeAsync(int userId, int notificationTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_UsersNotificationType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_UsersNotificationType(ref qryItem, userId, notificationTypeId, numChildLevels);

				var dbItem = await qryItem.Where(
						x => x.UserId == userId
						&& x.NotificationTypeId == notificationTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_UsersNotificationType(ref dbItem, userId, notificationTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<UsersNotificationType> GetFirstOrDefaultAsync(UsersNotificationType item)
			{
				return await _ctx.UsersNotificationTypes.Where(
						x => x.UserId == item.UserId
						&& x.NotificationTypeId == item.NotificationTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<UsersNotificationType>> UpdateAsync(UsersNotificationType item)
		{
			var oldItem = await _ctx.UsersNotificationTypes.FirstOrDefaultAsync(
						x => x.UserId == item.UserId
						&& x.NotificationTypeId == item.NotificationTypeId);
			var result = await UpdateAsync<UsersNotificationType>(item, oldItem);
			RunCustomLogicAfterUpdate_UsersNotificationType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<UsersNotificationType>> Delete_UsersNotificationTypeAsync(int userId, int notificationTypeId)
			{
				return await DeleteAsync<UsersNotificationType>(_ctx.UsersNotificationTypes.Where(
						x => x.UserId == userId
						&& x.NotificationTypeId == notificationTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<UsersNotificationType>> DeleteAsync(UsersNotificationType item)
			{
				return await DeleteAsync<UsersNotificationType>(_ctx.UsersNotificationTypes.Where(
						x => x.UserId == item.UserId
						&& x.NotificationTypeId == item.NotificationTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_UsersNotificationType(UsersNotificationType item, IRepositoryActionResult<UsersNotificationType> result);

		partial void RunCustomLogicAfterUpdate_UsersNotificationType(UsersNotificationType newItem, UsersNotificationType oldItem, IRepositoryActionResult<UsersNotificationType> result);

		partial void RunCustomLogicOnGetQueryableByPK_UsersNotificationType(ref IQueryable<UsersNotificationType> qryItem, int userId, int notificationTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_UsersNotificationType(ref UsersNotificationType dbItem, int userId, int notificationTypeId, int numChildLevels);



		#endregion UsersNotificationType

		#region Vehicle

		public async Task<IRepositoryActionResult<Vehicle>> InsertAsync(Vehicle item)
		{
			var result = await InsertAsync<Vehicle>(item);
			RunCustomLogicAfterInsert_Vehicle(item, result);

			return result;
		}


		public IQueryable<Vehicle> GetQueryable_Vehicle()
		{
			return _ctx.Set<Vehicle>();
		}

			public async Task<Vehicle> Get_VehicleAsync(int vehicleId, int numChildLevels)
			{
				var qryItem = GetQueryable_Vehicle().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_Vehicle(ref qryItem, vehicleId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.VehicleId == vehicleId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_Vehicle(ref dbItem, vehicleId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<Vehicle> GetFirstOrDefaultAsync(Vehicle item)
			{
				return await _ctx.Vehicles.Where(x => x.VehicleId == item.VehicleId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<Vehicle>> UpdateAsync(Vehicle item)
		{
			var oldItem = await _ctx.Vehicles.FirstOrDefaultAsync(x => x.VehicleId == item.VehicleId);
			var result = await UpdateAsync<Vehicle>(item, oldItem);
			RunCustomLogicAfterUpdate_Vehicle(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<Vehicle>> Delete_VehicleAsync(int vehicleId)
			{
				return await DeleteAsync<Vehicle>(_ctx.Vehicles.Where(x => x.VehicleId == vehicleId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<Vehicle>> DeleteAsync(Vehicle item)
			{
				return await DeleteAsync<Vehicle>(_ctx.Vehicles.Where(x => x.VehicleId == item.VehicleId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_Vehicle(Vehicle item, IRepositoryActionResult<Vehicle> result);

		partial void RunCustomLogicAfterUpdate_Vehicle(Vehicle newItem, Vehicle oldItem, IRepositoryActionResult<Vehicle> result);

		partial void RunCustomLogicOnGetQueryableByPK_Vehicle(ref IQueryable<Vehicle> qryItem, int vehicleId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_Vehicle(ref Vehicle dbItem, int vehicleId, int numChildLevels);



		#endregion Vehicle

		#region VehicleBusRoute

		public async Task<IRepositoryActionResult<VehicleBusRoute>> InsertAsync(VehicleBusRoute item)
		{
			var result = await InsertAsync<VehicleBusRoute>(item);
			RunCustomLogicAfterInsert_VehicleBusRoute(item, result);

			return result;
		}


		public IQueryable<VehicleBusRoute> GetQueryable_VehicleBusRoute()
		{
			return _ctx.Set<VehicleBusRoute>();
		}

			public async Task<VehicleBusRoute> Get_VehicleBusRouteAsync(int vehicleId, int busRouteId, int numChildLevels)
			{
				var qryItem = GetQueryable_VehicleBusRoute().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_VehicleBusRoute(ref qryItem, vehicleId, busRouteId, numChildLevels);

				var dbItem = await qryItem.Where(
						x => x.VehicleId == vehicleId
						&& x.BusRouteId == busRouteId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_VehicleBusRoute(ref dbItem, vehicleId, busRouteId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<VehicleBusRoute> GetFirstOrDefaultAsync(VehicleBusRoute item)
			{
				return await _ctx.VehicleBusRoutes.Where(
						x => x.VehicleId == item.VehicleId
						&& x.BusRouteId == item.BusRouteId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<VehicleBusRoute>> UpdateAsync(VehicleBusRoute item)
		{
			var oldItem = await _ctx.VehicleBusRoutes.FirstOrDefaultAsync(
						x => x.VehicleId == item.VehicleId
						&& x.BusRouteId == item.BusRouteId);
			var result = await UpdateAsync<VehicleBusRoute>(item, oldItem);
			RunCustomLogicAfterUpdate_VehicleBusRoute(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<VehicleBusRoute>> Delete_VehicleBusRouteAsync(int vehicleId, int busRouteId)
			{
				return await DeleteAsync<VehicleBusRoute>(_ctx.VehicleBusRoutes.Where(
						x => x.VehicleId == vehicleId
						&& x.BusRouteId == busRouteId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<VehicleBusRoute>> DeleteAsync(VehicleBusRoute item)
			{
				return await DeleteAsync<VehicleBusRoute>(_ctx.VehicleBusRoutes.Where(
						x => x.VehicleId == item.VehicleId
						&& x.BusRouteId == item.BusRouteId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_VehicleBusRoute(VehicleBusRoute item, IRepositoryActionResult<VehicleBusRoute> result);

		partial void RunCustomLogicAfterUpdate_VehicleBusRoute(VehicleBusRoute newItem, VehicleBusRoute oldItem, IRepositoryActionResult<VehicleBusRoute> result);

		partial void RunCustomLogicOnGetQueryableByPK_VehicleBusRoute(ref IQueryable<VehicleBusRoute> qryItem, int vehicleId, int busRouteId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_VehicleBusRoute(ref VehicleBusRoute dbItem, int vehicleId, int busRouteId, int numChildLevels);



		#endregion VehicleBusRoute

		#region VehicleFeatureType

		public async Task<IRepositoryActionResult<VehicleFeatureType>> InsertAsync(VehicleFeatureType item)
		{
			var result = await InsertAsync<VehicleFeatureType>(item);
			RunCustomLogicAfterInsert_VehicleFeatureType(item, result);

			return result;
		}


		public IQueryable<VehicleFeatureType> GetQueryable_VehicleFeatureType()
		{
			return _ctx.Set<VehicleFeatureType>();
		}

			public async Task<VehicleFeatureType> Get_VehicleFeatureTypeAsync(int vehicleFeatureTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_VehicleFeatureType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_VehicleFeatureType(ref qryItem, vehicleFeatureTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.VehicleFeatureTypeId == vehicleFeatureTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_VehicleFeatureType(ref dbItem, vehicleFeatureTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<VehicleFeatureType> GetFirstOrDefaultAsync(VehicleFeatureType item)
			{
				return await _ctx.VehicleFeatureTypes.Where(x => x.VehicleFeatureTypeId == item.VehicleFeatureTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<VehicleFeatureType>> UpdateAsync(VehicleFeatureType item)
		{
			var oldItem = await _ctx.VehicleFeatureTypes.FirstOrDefaultAsync(x => x.VehicleFeatureTypeId == item.VehicleFeatureTypeId);
			var result = await UpdateAsync<VehicleFeatureType>(item, oldItem);
			RunCustomLogicAfterUpdate_VehicleFeatureType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<VehicleFeatureType>> Delete_VehicleFeatureTypeAsync(int vehicleFeatureTypeId)
			{
				return await DeleteAsync<VehicleFeatureType>(_ctx.VehicleFeatureTypes.Where(x => x.VehicleFeatureTypeId == vehicleFeatureTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<VehicleFeatureType>> DeleteAsync(VehicleFeatureType item)
			{
				return await DeleteAsync<VehicleFeatureType>(_ctx.VehicleFeatureTypes.Where(x => x.VehicleFeatureTypeId == item.VehicleFeatureTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_VehicleFeatureType(VehicleFeatureType item, IRepositoryActionResult<VehicleFeatureType> result);

		partial void RunCustomLogicAfterUpdate_VehicleFeatureType(VehicleFeatureType newItem, VehicleFeatureType oldItem, IRepositoryActionResult<VehicleFeatureType> result);

		partial void RunCustomLogicOnGetQueryableByPK_VehicleFeatureType(ref IQueryable<VehicleFeatureType> qryItem, int vehicleFeatureTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_VehicleFeatureType(ref VehicleFeatureType dbItem, int vehicleFeatureTypeId, int numChildLevels);



		#endregion VehicleFeatureType

		#region VehicleFeatureTypeTranslation

		public async Task<IRepositoryActionResult<VehicleFeatureTypeTranslation>> InsertAsync(VehicleFeatureTypeTranslation item)
		{
			var result = await InsertAsync<VehicleFeatureTypeTranslation>(item);
			RunCustomLogicAfterInsert_VehicleFeatureTypeTranslation(item, result);

			return result;
		}


		public IQueryable<VehicleFeatureTypeTranslation> GetQueryable_VehicleFeatureTypeTranslation()
		{
			return _ctx.Set<VehicleFeatureTypeTranslation>();
		}

			public async Task<VehicleFeatureTypeTranslation> Get_VehicleFeatureTypeTranslationAsync(int vehicleFeatureTypeTranslationId, int numChildLevels)
			{
				var qryItem = GetQueryable_VehicleFeatureTypeTranslation().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_VehicleFeatureTypeTranslation(ref qryItem, vehicleFeatureTypeTranslationId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.VehicleFeatureTypeTranslationId == vehicleFeatureTypeTranslationId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_VehicleFeatureTypeTranslation(ref dbItem, vehicleFeatureTypeTranslationId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<VehicleFeatureTypeTranslation> GetFirstOrDefaultAsync(VehicleFeatureTypeTranslation item)
			{
				return await _ctx.VehicleFeatureTypeTranslations.Where(x => x.VehicleFeatureTypeTranslationId == item.VehicleFeatureTypeTranslationId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<VehicleFeatureTypeTranslation>> UpdateAsync(VehicleFeatureTypeTranslation item)
		{
			var oldItem = await _ctx.VehicleFeatureTypeTranslations.FirstOrDefaultAsync(x => x.VehicleFeatureTypeTranslationId == item.VehicleFeatureTypeTranslationId);
			var result = await UpdateAsync<VehicleFeatureTypeTranslation>(item, oldItem);
			RunCustomLogicAfterUpdate_VehicleFeatureTypeTranslation(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<VehicleFeatureTypeTranslation>> Delete_VehicleFeatureTypeTranslationAsync(int vehicleFeatureTypeTranslationId)
			{
				return await DeleteAsync<VehicleFeatureTypeTranslation>(_ctx.VehicleFeatureTypeTranslations.Where(x => x.VehicleFeatureTypeTranslationId == vehicleFeatureTypeTranslationId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<VehicleFeatureTypeTranslation>> DeleteAsync(VehicleFeatureTypeTranslation item)
			{
				return await DeleteAsync<VehicleFeatureTypeTranslation>(_ctx.VehicleFeatureTypeTranslations.Where(x => x.VehicleFeatureTypeTranslationId == item.VehicleFeatureTypeTranslationId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_VehicleFeatureTypeTranslation(VehicleFeatureTypeTranslation item, IRepositoryActionResult<VehicleFeatureTypeTranslation> result);

		partial void RunCustomLogicAfterUpdate_VehicleFeatureTypeTranslation(VehicleFeatureTypeTranslation newItem, VehicleFeatureTypeTranslation oldItem, IRepositoryActionResult<VehicleFeatureTypeTranslation> result);

		partial void RunCustomLogicOnGetQueryableByPK_VehicleFeatureTypeTranslation(ref IQueryable<VehicleFeatureTypeTranslation> qryItem, int vehicleFeatureTypeTranslationId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_VehicleFeatureTypeTranslation(ref VehicleFeatureTypeTranslation dbItem, int vehicleFeatureTypeTranslationId, int numChildLevels);



		#endregion VehicleFeatureTypeTranslation

		#region VehicleStatusType

		public async Task<IRepositoryActionResult<VehicleStatusType>> InsertAsync(VehicleStatusType item)
		{
			var result = await InsertAsync<VehicleStatusType>(item);
			RunCustomLogicAfterInsert_VehicleStatusType(item, result);

			return result;
		}


		public IQueryable<VehicleStatusType> GetQueryable_VehicleStatusType()
		{
			return _ctx.Set<VehicleStatusType>();
		}

			public async Task<VehicleStatusType> Get_VehicleStatusTypeAsync(int vehicleStatusTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_VehicleStatusType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_VehicleStatusType(ref qryItem, vehicleStatusTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.VehicleStatusTypeId == vehicleStatusTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_VehicleStatusType(ref dbItem, vehicleStatusTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<VehicleStatusType> GetFirstOrDefaultAsync(VehicleStatusType item)
			{
				return await _ctx.VehicleStatusTypes.Where(x => x.VehicleStatusTypeId == item.VehicleStatusTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<VehicleStatusType>> UpdateAsync(VehicleStatusType item)
		{
			var oldItem = await _ctx.VehicleStatusTypes.FirstOrDefaultAsync(x => x.VehicleStatusTypeId == item.VehicleStatusTypeId);
			var result = await UpdateAsync<VehicleStatusType>(item, oldItem);
			RunCustomLogicAfterUpdate_VehicleStatusType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<VehicleStatusType>> Delete_VehicleStatusTypeAsync(int vehicleStatusTypeId)
			{
				return await DeleteAsync<VehicleStatusType>(_ctx.VehicleStatusTypes.Where(x => x.VehicleStatusTypeId == vehicleStatusTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<VehicleStatusType>> DeleteAsync(VehicleStatusType item)
			{
				return await DeleteAsync<VehicleStatusType>(_ctx.VehicleStatusTypes.Where(x => x.VehicleStatusTypeId == item.VehicleStatusTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_VehicleStatusType(VehicleStatusType item, IRepositoryActionResult<VehicleStatusType> result);

		partial void RunCustomLogicAfterUpdate_VehicleStatusType(VehicleStatusType newItem, VehicleStatusType oldItem, IRepositoryActionResult<VehicleStatusType> result);

		partial void RunCustomLogicOnGetQueryableByPK_VehicleStatusType(ref IQueryable<VehicleStatusType> qryItem, int vehicleStatusTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_VehicleStatusType(ref VehicleStatusType dbItem, int vehicleStatusTypeId, int numChildLevels);



		#endregion VehicleStatusType

		#region VehicleStatusTypeTranslation

		public async Task<IRepositoryActionResult<VehicleStatusTypeTranslation>> InsertAsync(VehicleStatusTypeTranslation item)
		{
			var result = await InsertAsync<VehicleStatusTypeTranslation>(item);
			RunCustomLogicAfterInsert_VehicleStatusTypeTranslation(item, result);

			return result;
		}


		public IQueryable<VehicleStatusTypeTranslation> GetQueryable_VehicleStatusTypeTranslation()
		{
			return _ctx.Set<VehicleStatusTypeTranslation>();
		}

			public async Task<VehicleStatusTypeTranslation> Get_VehicleStatusTypeTranslationAsync(int vehicleStatusTypeTranslationId, int numChildLevels)
			{
				var qryItem = GetQueryable_VehicleStatusTypeTranslation().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_VehicleStatusTypeTranslation(ref qryItem, vehicleStatusTypeTranslationId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.VehicleStatusTypeTranslationId == vehicleStatusTypeTranslationId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_VehicleStatusTypeTranslation(ref dbItem, vehicleStatusTypeTranslationId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<VehicleStatusTypeTranslation> GetFirstOrDefaultAsync(VehicleStatusTypeTranslation item)
			{
				return await _ctx.VehicleStatusTypeTranslations.Where(x => x.VehicleStatusTypeTranslationId == item.VehicleStatusTypeTranslationId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<VehicleStatusTypeTranslation>> UpdateAsync(VehicleStatusTypeTranslation item)
		{
			var oldItem = await _ctx.VehicleStatusTypeTranslations.FirstOrDefaultAsync(x => x.VehicleStatusTypeTranslationId == item.VehicleStatusTypeTranslationId);
			var result = await UpdateAsync<VehicleStatusTypeTranslation>(item, oldItem);
			RunCustomLogicAfterUpdate_VehicleStatusTypeTranslation(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<VehicleStatusTypeTranslation>> Delete_VehicleStatusTypeTranslationAsync(int vehicleStatusTypeTranslationId)
			{
				return await DeleteAsync<VehicleStatusTypeTranslation>(_ctx.VehicleStatusTypeTranslations.Where(x => x.VehicleStatusTypeTranslationId == vehicleStatusTypeTranslationId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<VehicleStatusTypeTranslation>> DeleteAsync(VehicleStatusTypeTranslation item)
			{
				return await DeleteAsync<VehicleStatusTypeTranslation>(_ctx.VehicleStatusTypeTranslations.Where(x => x.VehicleStatusTypeTranslationId == item.VehicleStatusTypeTranslationId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_VehicleStatusTypeTranslation(VehicleStatusTypeTranslation item, IRepositoryActionResult<VehicleStatusTypeTranslation> result);

		partial void RunCustomLogicAfterUpdate_VehicleStatusTypeTranslation(VehicleStatusTypeTranslation newItem, VehicleStatusTypeTranslation oldItem, IRepositoryActionResult<VehicleStatusTypeTranslation> result);

		partial void RunCustomLogicOnGetQueryableByPK_VehicleStatusTypeTranslation(ref IQueryable<VehicleStatusTypeTranslation> qryItem, int vehicleStatusTypeTranslationId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_VehicleStatusTypeTranslation(ref VehicleStatusTypeTranslation dbItem, int vehicleStatusTypeTranslationId, int numChildLevels);



		#endregion VehicleStatusTypeTranslation

		#region VehicleType

		public async Task<IRepositoryActionResult<VehicleType>> InsertAsync(VehicleType item)
		{
			var result = await InsertAsync<VehicleType>(item);
			RunCustomLogicAfterInsert_VehicleType(item, result);

			return result;
		}


		public IQueryable<VehicleType> GetQueryable_VehicleType()
		{
			return _ctx.Set<VehicleType>();
		}

			public async Task<VehicleType> Get_VehicleTypeAsync(int vehicleTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_VehicleType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_VehicleType(ref qryItem, vehicleTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.VehicleTypeId == vehicleTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_VehicleType(ref dbItem, vehicleTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<VehicleType> GetFirstOrDefaultAsync(VehicleType item)
			{
				return await _ctx.VehicleTypes.Where(x => x.VehicleTypeId == item.VehicleTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<VehicleType>> UpdateAsync(VehicleType item)
		{
			var oldItem = await _ctx.VehicleTypes.FirstOrDefaultAsync(x => x.VehicleTypeId == item.VehicleTypeId);
			var result = await UpdateAsync<VehicleType>(item, oldItem);
			RunCustomLogicAfterUpdate_VehicleType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<VehicleType>> Delete_VehicleTypeAsync(int vehicleTypeId)
			{
				return await DeleteAsync<VehicleType>(_ctx.VehicleTypes.Where(x => x.VehicleTypeId == vehicleTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<VehicleType>> DeleteAsync(VehicleType item)
			{
				return await DeleteAsync<VehicleType>(_ctx.VehicleTypes.Where(x => x.VehicleTypeId == item.VehicleTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_VehicleType(VehicleType item, IRepositoryActionResult<VehicleType> result);

		partial void RunCustomLogicAfterUpdate_VehicleType(VehicleType newItem, VehicleType oldItem, IRepositoryActionResult<VehicleType> result);

		partial void RunCustomLogicOnGetQueryableByPK_VehicleType(ref IQueryable<VehicleType> qryItem, int vehicleTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_VehicleType(ref VehicleType dbItem, int vehicleTypeId, int numChildLevels);



		#endregion VehicleType

		#region VehicleTypeVehicleFeatureType

		public async Task<IRepositoryActionResult<VehicleTypeVehicleFeatureType>> InsertAsync(VehicleTypeVehicleFeatureType item)
		{
			var result = await InsertAsync<VehicleTypeVehicleFeatureType>(item);
			RunCustomLogicAfterInsert_VehicleTypeVehicleFeatureType(item, result);

			return result;
		}


		public IQueryable<VehicleTypeVehicleFeatureType> GetQueryable_VehicleTypeVehicleFeatureType()
		{
			return _ctx.Set<VehicleTypeVehicleFeatureType>();
		}

			public async Task<VehicleTypeVehicleFeatureType> Get_VehicleTypeVehicleFeatureTypeAsync(int vehicleTypeId, int vehicleFeatureTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_VehicleTypeVehicleFeatureType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_VehicleTypeVehicleFeatureType(ref qryItem, vehicleTypeId, vehicleFeatureTypeId, numChildLevels);

				var dbItem = await qryItem.Where(
						x => x.VehicleTypeId == vehicleTypeId
						&& x.VehicleFeatureTypeId == vehicleFeatureTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_VehicleTypeVehicleFeatureType(ref dbItem, vehicleTypeId, vehicleFeatureTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<VehicleTypeVehicleFeatureType> GetFirstOrDefaultAsync(VehicleTypeVehicleFeatureType item)
			{
				return await _ctx.VehicleTypeVehicleFeatureTypes.Where(
						x => x.VehicleTypeId == item.VehicleTypeId
						&& x.VehicleFeatureTypeId == item.VehicleFeatureTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<VehicleTypeVehicleFeatureType>> UpdateAsync(VehicleTypeVehicleFeatureType item)
		{
			var oldItem = await _ctx.VehicleTypeVehicleFeatureTypes.FirstOrDefaultAsync(
						x => x.VehicleTypeId == item.VehicleTypeId
						&& x.VehicleFeatureTypeId == item.VehicleFeatureTypeId);
			var result = await UpdateAsync<VehicleTypeVehicleFeatureType>(item, oldItem);
			RunCustomLogicAfterUpdate_VehicleTypeVehicleFeatureType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<VehicleTypeVehicleFeatureType>> Delete_VehicleTypeVehicleFeatureTypeAsync(int vehicleTypeId, int vehicleFeatureTypeId)
			{
				return await DeleteAsync<VehicleTypeVehicleFeatureType>(_ctx.VehicleTypeVehicleFeatureTypes.Where(
						x => x.VehicleTypeId == vehicleTypeId
						&& x.VehicleFeatureTypeId == vehicleFeatureTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<VehicleTypeVehicleFeatureType>> DeleteAsync(VehicleTypeVehicleFeatureType item)
			{
				return await DeleteAsync<VehicleTypeVehicleFeatureType>(_ctx.VehicleTypeVehicleFeatureTypes.Where(
						x => x.VehicleTypeId == item.VehicleTypeId
						&& x.VehicleFeatureTypeId == item.VehicleFeatureTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_VehicleTypeVehicleFeatureType(VehicleTypeVehicleFeatureType item, IRepositoryActionResult<VehicleTypeVehicleFeatureType> result);

		partial void RunCustomLogicAfterUpdate_VehicleTypeVehicleFeatureType(VehicleTypeVehicleFeatureType newItem, VehicleTypeVehicleFeatureType oldItem, IRepositoryActionResult<VehicleTypeVehicleFeatureType> result);

		partial void RunCustomLogicOnGetQueryableByPK_VehicleTypeVehicleFeatureType(ref IQueryable<VehicleTypeVehicleFeatureType> qryItem, int vehicleTypeId, int vehicleFeatureTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_VehicleTypeVehicleFeatureType(ref VehicleTypeVehicleFeatureType dbItem, int vehicleTypeId, int vehicleFeatureTypeId, int numChildLevels);



		#endregion VehicleTypeVehicleFeatureType

		#region VehicleVehicleFeatureType

		public async Task<IRepositoryActionResult<VehicleVehicleFeatureType>> InsertAsync(VehicleVehicleFeatureType item)
		{
			var result = await InsertAsync<VehicleVehicleFeatureType>(item);
			RunCustomLogicAfterInsert_VehicleVehicleFeatureType(item, result);

			return result;
		}


		public IQueryable<VehicleVehicleFeatureType> GetQueryable_VehicleVehicleFeatureType()
		{
			return _ctx.Set<VehicleVehicleFeatureType>();
		}

			public async Task<VehicleVehicleFeatureType> Get_VehicleVehicleFeatureTypeAsync(int vehicleId, int vehicleFeatureTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_VehicleVehicleFeatureType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_VehicleVehicleFeatureType(ref qryItem, vehicleId, vehicleFeatureTypeId, numChildLevels);

				var dbItem = await qryItem.Where(
						x => x.VehicleId == vehicleId
						&& x.VehicleFeatureTypeId == vehicleFeatureTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_VehicleVehicleFeatureType(ref dbItem, vehicleId, vehicleFeatureTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<VehicleVehicleFeatureType> GetFirstOrDefaultAsync(VehicleVehicleFeatureType item)
			{
				return await _ctx.VehicleVehicleFeatureTypes.Where(
						x => x.VehicleId == item.VehicleId
						&& x.VehicleFeatureTypeId == item.VehicleFeatureTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<VehicleVehicleFeatureType>> UpdateAsync(VehicleVehicleFeatureType item)
		{
			var oldItem = await _ctx.VehicleVehicleFeatureTypes.FirstOrDefaultAsync(
						x => x.VehicleId == item.VehicleId
						&& x.VehicleFeatureTypeId == item.VehicleFeatureTypeId);
			var result = await UpdateAsync<VehicleVehicleFeatureType>(item, oldItem);
			RunCustomLogicAfterUpdate_VehicleVehicleFeatureType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<VehicleVehicleFeatureType>> Delete_VehicleVehicleFeatureTypeAsync(int vehicleId, int vehicleFeatureTypeId)
			{
				return await DeleteAsync<VehicleVehicleFeatureType>(_ctx.VehicleVehicleFeatureTypes.Where(
						x => x.VehicleId == vehicleId
						&& x.VehicleFeatureTypeId == vehicleFeatureTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<VehicleVehicleFeatureType>> DeleteAsync(VehicleVehicleFeatureType item)
			{
				return await DeleteAsync<VehicleVehicleFeatureType>(_ctx.VehicleVehicleFeatureTypes.Where(
						x => x.VehicleId == item.VehicleId
						&& x.VehicleFeatureTypeId == item.VehicleFeatureTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_VehicleVehicleFeatureType(VehicleVehicleFeatureType item, IRepositoryActionResult<VehicleVehicleFeatureType> result);

		partial void RunCustomLogicAfterUpdate_VehicleVehicleFeatureType(VehicleVehicleFeatureType newItem, VehicleVehicleFeatureType oldItem, IRepositoryActionResult<VehicleVehicleFeatureType> result);

		partial void RunCustomLogicOnGetQueryableByPK_VehicleVehicleFeatureType(ref IQueryable<VehicleVehicleFeatureType> qryItem, int vehicleId, int vehicleFeatureTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_VehicleVehicleFeatureType(ref VehicleVehicleFeatureType dbItem, int vehicleId, int vehicleFeatureTypeId, int numChildLevels);



		#endregion VehicleVehicleFeatureType

	}
}
