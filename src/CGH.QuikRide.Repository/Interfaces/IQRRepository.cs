// <auto-generated> - Template:RepositoryInterface, Version:1.1, Id:f766650e-5c46-4239-b6fd-0cfca2673207
using CodeGenHero.Repository;
using CGH.QuikRide.Repository.Entities.QR;
using System;
using System.Threading.Tasks;

namespace CGH.QuikRide.Repository.Interface
{
	public partial interface IQRRepository : IQRRepositoryCrud
	{

		QRDataContext QRDataContext { get; }

		Task<IRepositoryActionResult<Driver>> Delete_DriverAsync(int driverId);
		Task<Driver> Get_DriverAsync(int driverId, int numChildLevels);

		Task<IRepositoryActionResult<Feedback>> Delete_FeedbackAsync(System.Guid feedbackId);
		Task<Feedback> Get_FeedbackAsync(System.Guid feedbackId, int numChildLevels);

		Task<IRepositoryActionResult<FeedbackType>> Delete_FeedbackTypeAsync(int feedbackTypeId);
		Task<FeedbackType> Get_FeedbackTypeAsync(int feedbackTypeId, int numChildLevels);

		Task<IRepositoryActionResult<GenderType>> Delete_GenderTypeAsync(int genderTypeId);
		Task<GenderType> Get_GenderTypeAsync(int genderTypeId, int numChildLevels);

		Task<IRepositoryActionResult<Holiday>> Delete_HolidayAsync(int holidayId);
		Task<Holiday> Get_HolidayAsync(int holidayId, int numChildLevels);

		Task<IRepositoryActionResult<LanguageType>> Delete_LanguageTypeAsync(int languageTypeId);
		Task<LanguageType> Get_LanguageTypeAsync(int languageTypeId, int numChildLevels);

		Task<IRepositoryActionResult<Location>> Delete_LocationAsync(System.Guid locationId);
		Task<Location> Get_LocationAsync(System.Guid locationId, int numChildLevels);

		Task<IRepositoryActionResult<NotificationType>> Delete_NotificationTypeAsync(int notificationTypeId);
		Task<NotificationType> Get_NotificationTypeAsync(int notificationTypeId, int numChildLevels);

		Task<IRepositoryActionResult<Reservation>> Delete_ReservationAsync(System.Guid reservationId);
		Task<Reservation> Get_ReservationAsync(System.Guid reservationId, int numChildLevels);

		Task<IRepositoryActionResult<ReservationCancellationReasonType>> Delete_ReservationCancellationReasonTypeAsync(int reservationCancellationReasonTypeId);
		Task<ReservationCancellationReasonType> Get_ReservationCancellationReasonTypeAsync(int reservationCancellationReasonTypeId, int numChildLevels);

		Task<IRepositoryActionResult<ReservationRequest>> Delete_ReservationRequestAsync(System.Guid reservationRequestId);
		Task<ReservationRequest> Get_ReservationRequestAsync(System.Guid reservationRequestId, int numChildLevels);

		Task<IRepositoryActionResult<ReservationRequestCancellationReasonType>> Delete_ReservationRequestCancellationReasonTypeAsync(int reservationRequestCancellationReasonTypeId);
		Task<ReservationRequestCancellationReasonType> Get_ReservationRequestCancellationReasonTypeAsync(int reservationRequestCancellationReasonTypeId, int numChildLevels);

		Task<IRepositoryActionResult<ReservationRequestOption>> Delete_ReservationRequestOptionAsync(int reservationRequestOptionId);
		Task<ReservationRequestOption> Get_ReservationRequestOptionAsync(int reservationRequestOptionId, int numChildLevels);

		Task<IRepositoryActionResult<ReservationRequestStatusType>> Delete_ReservationRequestStatusTypeAsync(int reservationRequestStatusTypeId);
		Task<ReservationRequestStatusType> Get_ReservationRequestStatusTypeAsync(int reservationRequestStatusTypeId, int numChildLevels);

		Task<IRepositoryActionResult<ReservationStatusType>> Delete_ReservationStatusTypeAsync(int reservationStatusTypeId);
		Task<ReservationStatusType> Get_ReservationStatusTypeAsync(int reservationStatusTypeId, int numChildLevels);

		Task<IRepositoryActionResult<Ride>> Delete_RideAsync(System.Guid rideId);
		Task<Ride> Get_RideAsync(System.Guid rideId, int numChildLevels);

		Task<IRepositoryActionResult<RidePosition>> Delete_RidePositionAsync(System.Guid ridePositionId);
		Task<RidePosition> Get_RidePositionAsync(System.Guid ridePositionId, int numChildLevels);

		Task<IRepositoryActionResult<RideServiceType>> Delete_RideServiceTypeAsync(int rideServiceTypeId);
		Task<RideServiceType> Get_RideServiceTypeAsync(int rideServiceTypeId, int numChildLevels);

		Task<IRepositoryActionResult<User>> Delete_UserAsync(int userId);
		Task<User> Get_UserAsync(int userId, int numChildLevels);

		Task<IRepositoryActionResult<UsersLocation>> Delete_UsersLocationAsync(int userId, System.Guid locationId);
		Task<UsersLocation> Get_UsersLocationAsync(int userId, System.Guid locationId, int numChildLevels);

		Task<IRepositoryActionResult<UsersNotificationType>> Delete_UsersNotificationTypeAsync(int userId, int notificationTypeId);
		Task<UsersNotificationType> Get_UsersNotificationTypeAsync(int userId, int notificationTypeId, int numChildLevels);

		Task<IRepositoryActionResult<Vehicle>> Delete_VehicleAsync(int vehicleId);
		Task<Vehicle> Get_VehicleAsync(int vehicleId, int numChildLevels);

		Task<IRepositoryActionResult<VehicleFeatureType>> Delete_VehicleFeatureTypeAsync(int vehicleFeatureTypeId);
		Task<VehicleFeatureType> Get_VehicleFeatureTypeAsync(int vehicleFeatureTypeId, int numChildLevels);

		Task<IRepositoryActionResult<VehicleStatusType>> Delete_VehicleStatusTypeAsync(int vehicleStatusTypeId);
		Task<VehicleStatusType> Get_VehicleStatusTypeAsync(int vehicleStatusTypeId, int numChildLevels);

		Task<IRepositoryActionResult<VehicleType>> Delete_VehicleTypeAsync(int vehicleTypeId);
		Task<VehicleType> Get_VehicleTypeAsync(int vehicleTypeId, int numChildLevels);

		Task<IRepositoryActionResult<VehicleTypeVehicleFeatureType>> Delete_VehicleTypeVehicleFeatureTypeAsync(int vehicleTypeId, int vehicleFeatureTypeId);
		Task<VehicleTypeVehicleFeatureType> Get_VehicleTypeVehicleFeatureTypeAsync(int vehicleTypeId, int vehicleFeatureTypeId, int numChildLevels);

		Task<IRepositoryActionResult<VehicleVehicleFeatureType>> Delete_VehicleVehicleFeatureTypeAsync(int vehicleId, int vehicleFeatureTypeId);
		Task<VehicleVehicleFeatureType> Get_VehicleVehicleFeatureTypeAsync(int vehicleId, int vehicleFeatureTypeId, int numChildLevels);

	}
}
